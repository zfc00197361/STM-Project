<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_t_m">
<title>TM class Reference</title>
<para>
    <programlisting>#include <link linkend="_t_m_8h">&lt;TM.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for TM</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_t_m__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for TM</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_t_m__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::mutex get_Lock</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::mutex register_Lock</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::map&lt; std::thread::id, std::shared_ptr&lt; TX &gt; &gt; txMap</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static pid_t _tm_id</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static std::map&lt; pid_t, std::map&lt; std::thread::id, int &gt; &gt; process_map_collection</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::map&lt; std::thread::id, int &gt; <link linkend="class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_1afb8bc9f42fe06c52747beb7f4c46915c">get_thread_Map</link> (
)<para><emphasis>@148 get_thread_Map std::map, returning a map to store all unique ID from all objects from 
all transactions within the main processes</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_t_m">TM</link> &amp; <link linkend="class_t_m_a85a6b783f0566f0877bab6a7de977c0a_1a85a6b783f0566f0877bab6a7de977c0a">operator=</link> (
const <link linkend="class_t_m">TM</link> &amp; )<para><emphasis>TM copy operator, prevent from copying the Transaction Manager.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_1a26ea481c24d9aa3aebd6dafb7253376e">registerTX</link> (
)<para><emphasis>@45 registerTX void function, register a new TX Transaction object into ythe txMap/Transaction 
Map to manage all the transactions within the shared library. TM Transaction managger checking the Process ID existence in the 
process map collection, If not in the map then register.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_t_m_a9b5afb6b9d7c5925ab5cc5c65078ac23_1a9b5afb6b9d7c5925ab5cc5c65078ac23">TM</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_t_m_a2d1de4a19f7ed6b2805ed6e955b8e45b_1a2d1de4a19f7ed6b2805ed6e955b8e45b">TM</link> (
const <link linkend="class_t_m">TM</link> &amp; )<para><emphasis>TM copy constructor, prevent from copying the Transaction Manager.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_t_m_a985f8cb24f685925ddd637c7030cd2b3_1a985f8cb24f685925ddd637c7030cd2b3">~TM</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static <link linkend="class_t_m">TM</link> &amp; <link linkend="class_t_m_a7ce5f35e0dae76df4fe116cf905bbe60_1a7ce5f35e0dae76df4fe116cf905bbe60">Instance</link> (
)<para><emphasis>@31 Instance TM, Scott Meyer&apos;s Singleton creation, thread safe Transaction Manager instance creation.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::shared_ptr&lt; <link linkend="class_t_x">TX</link> &gt; const <link linkend="class_t_m_a41cb0226cc4080c931651b13f74a0075_1a41cb0226cc4080c931651b13f74a0075">_get_tx</link> (
)<para><emphasis>@81 _get_tx std::shared_ptr&lt;TX&gt;, return an trtansaction Object as a shared_ptr, if TX not exists then create and register.#
 If the transaction Object exists then increasing the nesting level within the Transaction Object.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_t_m_a5e2d1127f2429f2f524d25f430eade06_1a5e2d1127f2429f2f524d25f430eade06">_TX_EXIT</link> (
)<para><emphasis>@108 _TX_EXIT void, when the thread calls the ostm_exit function in the transaction, and it will clear all elements 
from the shared global collection associated with the main process</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_t_m_a1d6891b1d3e71cc0acef54e7afe71c09_1a1d6891b1d3e71cc0acef54e7afe71c09">print_all</link> (
)<para><emphasis>@132 ONLY FOR TESTING print_all void function , print out all object key from txMAP collection associated
with the main process.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_1afb8bc9f42fe06c52747beb7f4c46915c">
                <title>std::map&lt; std::thread::id, int &gt; TM::get_thread_Map ()</title> <emphasis>@148 get_thread_Map std::map, returning a map to store all unique ID from all objects from 
all transactions within the main processes</emphasis>
                
            </section>
            <section xml:id="class_t_m_a85a6b783f0566f0877bab6a7de977c0a_1a85a6b783f0566f0877bab6a7de977c0a">
                <title>TM&amp; TM::operator= (const TM &amp;)=delete</title> <emphasis>TM copy operator, prevent from copying the Transaction Manager.</emphasis>
                
            </section>
            <section xml:id="class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_1a26ea481c24d9aa3aebd6dafb7253376e">
                <title>void TM::registerTX ()</title> <emphasis>@45 registerTX void function, register a new TX Transaction object into ythe txMap/Transaction 
Map to manage all the transactions within the shared library. TM Transaction managger checking the Process ID existence in the 
process map collection, If not in the map then register.</emphasis>
                
            </section>
            <section xml:id="class_t_m_a9b5afb6b9d7c5925ab5cc5c65078ac23_1a9b5afb6b9d7c5925ab5cc5c65078ac23">
                <title>TM::TM ()=default</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_t_m_a2d1de4a19f7ed6b2805ed6e955b8e45b_1a2d1de4a19f7ed6b2805ed6e955b8e45b">
                <title>TM::TM (const TM &amp;)=delete</title> <emphasis>TM copy constructor, prevent from copying the Transaction Manager.</emphasis>
                
            </section>
            <section xml:id="class_t_m_a985f8cb24f685925ddd637c7030cd2b3_1a985f8cb24f685925ddd637c7030cd2b3">
                <title>TM::~TM ()=default</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_t_m_a7ce5f35e0dae76df4fe116cf905bbe60_1a7ce5f35e0dae76df4fe116cf905bbe60">
                <title>TM &amp; TM::Instance ()</title> <emphasis>@31 Instance TM, Scott Meyer&apos;s Singleton creation, thread safe Transaction Manager instance creation.</emphasis>
                
<para>Scott Meyer&apos;s Singleton creation, thread safe Transaction Manager instance creation. </para>

            </section>
            <section xml:id="class_t_m_a41cb0226cc4080c931651b13f74a0075_1a41cb0226cc4080c931651b13f74a0075">
                <title>std::shared_ptr&lt; TX &gt; const TM::_get_tx ()</title> <emphasis>@81 _get_tx std::shared_ptr&lt;TX&gt;, return an trtansaction Object as a shared_ptr, if TX not exists then create and register.#
 If the transaction Object exists then increasing the nesting level within the Transaction Object.</emphasis>
                
<para>_get_tx std::shared_ptr&lt;TX&gt;, returning a shared pointer transaction object </para>

            </section>
            <section xml:id="class_t_m_a5e2d1127f2429f2f524d25f430eade06_1a5e2d1127f2429f2f524d25f430eade06">
                <title>void TM::_TX_EXIT ()</title> <emphasis>@108 _TX_EXIT void, when the thread calls the ostm_exit function in the transaction, and it will clear all elements 
from the shared global collection associated with the main process</emphasis>
                
<para>_TX_EXIT void function, the thread (<link linkend="class_t_x">TX</link> object) calls the ostm_exit function from the transaction, and clear all elements from the shared global collection associated with the main process </para>

            </section>
            <section xml:id="class_t_m_a1d6891b1d3e71cc0acef54e7afe71c09_1a1d6891b1d3e71cc0acef54e7afe71c09">
                <title>void TM::print_all ()</title> <emphasis>@132 ONLY FOR TESTING print_all void function , print out all object key from txMAP collection associated
with the main process.</emphasis>
                
<para>ONLY FOR TESTING! print_all void function, prints all object in the txMap </para>

            </section>
</section>
