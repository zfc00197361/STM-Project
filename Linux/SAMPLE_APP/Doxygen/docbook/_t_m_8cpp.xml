<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_t_m_8cpp">
    <title>TM.cpp File Reference</title>
    <programlisting>#include &quot;TM.h&quot;</programlisting>
    <programlisting>#include &lt;thread&gt;</programlisting>
    <programlisting>#include &lt;unistd.h&gt;</programlisting>
    <programlisting>#include &lt;sys/types.h&gt;</programlisting>
    <programlisting>#include &lt;iostream&gt;</programlisting>
<para>Include dependency diagram for TM.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="_t_m_8cpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for TM.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="_t_m_8cpp__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file TM.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">/*&#32;</emphasis>
2 <emphasis class="comment">&#32;*&#32;File:&#32;&#32;&#32;TM.cpp</emphasis>
3 <emphasis class="comment">&#32;*&#32;Author:&#32;Zoltan&#32;Fuzesi&#32;C00197361,&#32;</emphasis>
4 <emphasis class="comment">&#32;*&#32;IT&#32;Carlow,&#32;Software&#32;Engineering,&#32;</emphasis>
5 <emphasis class="comment">&#32;*</emphasis>
6 <emphasis class="comment">&#32;*&#32;Supervisor&#32;:&#32;Joe&#32;Kehoe,&#32;</emphasis>
7 <emphasis class="comment">&#32;*</emphasis>
8 <emphasis class="comment">&#32;*&#32;C++&#32;Software&#32;Transactional&#32;Memory,&#32;</emphasis>
9 <emphasis class="comment">&#32;*&#32;</emphasis>
10 <emphasis class="comment">&#32;*&#32;Created&#32;on&#32;December&#32;18,&#32;2017,&#32;2:09&#32;PM</emphasis>
11 <emphasis class="comment">&#32;*&#32;OSTM&#32;base&#32;class&#32;function&#32;declarations.</emphasis>
12 <emphasis class="comment">&#32;*/</emphasis>
13 
14 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="_t_m_8h">TM.h</link>&quot;</emphasis>
15 <emphasis class="preprocessor">#include&#32;&lt;thread&gt;</emphasis>
16 <emphasis class="preprocessor">#include&#32;&lt;unistd.h&gt;</emphasis>
17 <emphasis class="preprocessor">#include&#32;&lt;sys/types.h&gt;</emphasis>
18 <emphasis class="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
19 
20 <emphasis class="comment">/*</emphasis>
21 <emphasis class="comment">&#32;&#32;&#32;@23&#32;_tm_id&#32;pid_t,&#32;process&#32;id&#32;determine&#32;the&#32;actual&#32;process&#32;between&#32;process&#32;in&#32;the&#32;STM&#32;library</emphasis>
22 <emphasis class="comment">&#32;*/</emphasis>
23 pid_t&#32;<link linkend="class_t_m_a9d49d0ddef82337e54b684c9e1e8ad21_1a9d49d0ddef82337e54b684c9e1e8ad21">TM::_tm_id</link>;
24 <emphasis class="comment">/*</emphasis>
25 <emphasis class="comment">&#32;&#32;&#32;@27&#32;static&#32;Global&#32;std::map&#32;process_map_collection&#32;store&#32;all&#32;transactional&#32;objects/pointers</emphasis>
26 <emphasis class="comment">&#32;*/</emphasis>
27 std::map&lt;pid_t,&#32;std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;&gt;&#32;<link linkend="class_t_m_a6d417b18213968da2a70a914e80d639b_1a6d417b18213968da2a70a914e80d639b">TM::process_map_collection</link>;
<link linkend="class_t_m_a7ce5f35e0dae76df4fe116cf905bbe60_1a7ce5f35e0dae76df4fe116cf905bbe60">31 </link><link linkend="class_t_m">TM</link>&amp;&#32;<link linkend="class_t_m_a7ce5f35e0dae76df4fe116cf905bbe60_1a7ce5f35e0dae76df4fe116cf905bbe60">TM::Instance</link>()&#32;{
32 &#32;&#32;&#32;<emphasis class="comment">/*&#32;@33&#32;_instance&#32;TM,&#32;static&#32;class&#32;reference&#32;to&#32;the&#32;instance&#32;of&#32;the&#32;Transaction&#32;Manager&#32;class&#32;*/</emphasis>
33 &#32;&#32;&#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<link linkend="class_t_m">TM</link>&#32;_instance;
34 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@35&#32;_instance&#32;ppid,&#32;assigning&#32;the&#32;process&#32;id&#32;whoever&#32;created&#32;the&#32;Singleton&#32;instance&#32;*/</emphasis>
35 &#32;&#32;&#32;&#32;_instance.<link linkend="class_t_m_a9d49d0ddef82337e54b684c9e1e8ad21_1a9d49d0ddef82337e54b684c9e1e8ad21">_tm_id</link>&#32;=&#32;getpid();
36 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@37&#32;return&#32;Singleton&#32;instance&#32;*/</emphasis>
37 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;_instance;
38 }
39 
<link linkend="class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_1a26ea481c24d9aa3aebd6dafb7253376e">45 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_1a26ea481c24d9aa3aebd6dafb7253376e">TM::registerTX</link>()
46 {
47 &#32;&#32;<emphasis class="comment">/*&#32;@49&#32;guard&#32;std::lock_guard,&#32;locks&#32;the&#32;register_Lock&#32;mutex,&#32;unlock&#32;automatically&#32;when&#32;goes&#32;out&#32;of&#32;the&#32;scope&#32;register_Lock&#32;std::mutex,&#32;used&#32;by&#32;the&#32;lock_guard&#32;to&#32;protect&#32;shared&#32;map&#32;from&#32;race&#32;conditions&#32;*/</emphasis>
48 &#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;guard(<link linkend="class_t_m_aeb26546681bfe64e21606b8c012bb8c3_1aeb26546681bfe64e21606b8c012bb8c3">register_Lock</link>);
49 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@51&#32;getppid()&#32;return&#32;the&#32;actual&#32;main&#32;process&#32;thread&#32;id,&#32;I&#32;used&#32;it&#32;to&#32;associate&#32;the&#32;Transactionas&#32;with&#32;the&#32;main&#32;processes&#32;*/</emphasis>
50 &#32;&#32;&#32;&#32;pid_t&#32;ppid&#32;=&#32;getppid();
51 
52 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@53&#32;process_map_collection&#32;try&#32;to&#32;find&#32;the&#32;main&#32;process&#32;by&#32;it&apos;s&#32;ppid&#32;if&#32;registred&#32;in&#32;the&#32;library&#32;*/</emphasis>
53 &#32;&#32;&#32;&#32;std::map&lt;pid_t,&#32;std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;&gt;::iterator&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_m_a6d417b18213968da2a70a914e80d639b_1a6d417b18213968da2a70a914e80d639b">TM::process_map_collection</link>.find(ppid);
54 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@55&#32;Check&#32;if&#32;iterator&#32;pointing&#32;to&#32;the&#32;end&#32;of&#32;the&#32;process&#32;map&#32;then&#32;register&#32;*/</emphasis>
55 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(process_map_collection_Iterator&#32;==&#32;<link linkend="class_t_m_a6d417b18213968da2a70a914e80d639b_1a6d417b18213968da2a70a914e80d639b">TM::process_map_collection</link>.end())&#32;{
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@57&#32;Require&#32;new&#32;map&#32;to&#32;insert&#32;to&#32;the&#32;process&#32;map&#32;as&#32;a&#32;value&#32;by&#32;the&#32;ppid&#32;key&#32;&#32;*/</emphasis>
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;map&#32;=&#32;<link linkend="class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_1afb8bc9f42fe06c52747beb7f4c46915c">get_thread_Map</link>();
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@59&#32;Register&#32;main&#32;process/application&#32;to&#32;the&#32;global&#32;map&#32;&#32;*/</emphasis>
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_m_a6d417b18213968da2a70a914e80d639b_1a6d417b18213968da2a70a914e80d639b">TM::process_map_collection</link>.insert({ppid,&#32;map});
60 
61 &#32;&#32;&#32;&#32;}
62 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@63&#32;txMap&#32;std::map,&#32;collection&#32;to&#32;store&#32;all&#32;transaction&#32;created&#32;by&#32;the&#32;Transaction&#32;Manager&#32;*/</emphasis>
63 &#32;&#32;&#32;&#32;std::map&lt;std::thread::id,&#32;std::shared_ptr&#32;&lt;&#32;TX&gt;&gt;::iterator&#32;it&#32;=&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.find(std::this_thread::get_id());
64 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@65&#32;Check&#32;if&#32;iterator&#32;pointing&#32;to&#32;the&#32;end&#32;of&#32;the&#32;txMap&#32;then&#32;insert&#32;*/</emphasis>
65 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(it&#32;==&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.end())&#32;{
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@67&#32;Create&#32;a&#32;new&#32;Transaction&#32;Object&#32;as&#32;a&#32;shared&#32;pointer&#32;*/</emphasis>
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;TX&gt;&#32;_transaction_object(<emphasis class="keyword">new</emphasis>&#32;<link linkend="class_t_x">TX</link>(std::this_thread::get_id()));
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@69&#32;txMap&#32;insert&#32;the&#32;new&#32;transaction&#32;into&#32;the&#32;txMap&#32;by&#32;the&#32;threadID&#32;key&#32;*/</emphasis>
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.insert({std::this_thread::get_id(),&#32;_transaction_object});
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@71&#32;Get&#32;the&#32;map&#32;if&#32;the&#32;transaction&#32;registered&#32;first&#32;time&#32;*/</emphasis>
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_m_a6d417b18213968da2a70a914e80d639b_1a6d417b18213968da2a70a914e80d639b">TM::process_map_collection</link>.find(ppid);
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@73&#32;Insert&#32;to&#32;the&#32;GLOBAL&#32;MAP&#32;as&#32;a&#32;helper&#32;to&#32;clean&#32;up&#32;at&#32;end&#32;of&#32;main&#32;process.&#32;The&#32;value&#32;1&#32;is&#32;not&#32;used&#32;yet&#32;*/</emphasis>
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process_map_collection_Iterator-&gt;second.insert({std::this_thread::get_id(),&#32;1});
74 &#32;&#32;&#32;&#32;}
75 }
76 
<link linkend="class_t_m_a41cb0226cc4080c931651b13f74a0075_1a41cb0226cc4080c931651b13f74a0075">81 </link>std::shared_ptr&lt;TX&gt;<emphasis class="keyword">const</emphasis>&#32;<link linkend="class_t_m_a41cb0226cc4080c931651b13f74a0075_1a41cb0226cc4080c931651b13f74a0075">TM::_get_tx</link>()
82 {
83 &#32;&#32;&#32;
84 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@85&#32;guard&#32;std::lock_guard,&#32;locks&#32;the&#32;get_Lock&#32;mutex,&#32;unlock&#32;automatically&#32;when&#32;goes&#32;out&#32;of&#32;the&#32;scope&#32;get_Lock&#32;std::mutex,&#32;used&#32;by&#32;the&#32;lock_guard&#32;to&#32;protect&#32;txMap&#32;from&#32;race&#32;conditions&#32;*/</emphasis>
85 &#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;guard(<link linkend="class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_1a123bc5aa0766a7b909bebc54a429e5b0">get_Lock</link>);
86 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@87&#32;txMap&#32;try&#32;to&#32;find&#32;the&#32;TX&#32;Transaction&#32;object&#32;by&#32;it&apos;s&#32;actual&#32;thread&#32;ID&#32;if&#32;registred&#32;in&#32;the&#32;txMap&#32;*/</emphasis>
87 &#32;&#32;&#32;&#32;std::map&lt;std::thread::id,&#32;std::shared_ptr&lt;TX&gt;&gt;::iterator&#32;it&#32;=&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.find(std::this_thread::get_id());
88 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@89&#32;Check&#32;if&#32;iterator&#32;pointing&#32;to&#32;the&#32;end&#32;of&#32;the&#32;txMap&#32;then&#32;insert&#32;*/</emphasis>
89 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(it&#32;==&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.end())
90 &#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@92&#32;If&#32;cannot&#32;find&#32;then&#32;call&#32;the&#32;register&#32;function&#32;to&#32;register&#32;the&#32;thread&#32;with&#32;a&#32;transaction&#32;*/</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_1a26ea481c24d9aa3aebd6dafb7253376e">registerTX</link>();
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@94&#32;If&#32;it&apos;s&#32;registered&#32;first&#32;time&#32;then&#32;we&#32;need&#32;to&#32;find&#32;it&#32;after&#32;registration&#32;*/</emphasis>
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.find(std::this_thread::get_id());
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;
96 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@98&#32;If&#32;transaction&#32;already&#32;registered,&#32;it&#32;means&#32;the&#32;thread&#32;participating&#32;in&#32;nested&#32;transactions,&#32;and&#32;increase&#32;the&#32;nesting&#32;*/</emphasis>
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it-&gt;second-&gt;_increase_tx_nesting();
99 &#32;&#32;&#32;&#32;}
100 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@101&#32;Returning&#32;back&#32;the&#32;transaction&#32;(TX)&#32;object&#32;to&#32;the&#32;thread&#32;*/</emphasis>
101 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;it-&gt;second;
102 
103 }
<link linkend="class_t_m_a5e2d1127f2429f2f524d25f430eade06_1a5e2d1127f2429f2f524d25f430eade06">108 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_m_a5e2d1127f2429f2f524d25f430eade06_1a5e2d1127f2429f2f524d25f430eade06">TM::_TX_EXIT</link>(){
109 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;&#32;@110&#32;Transaction&#32;manger&#32;create&#32;a&#32;local&#32;Transaction&#32;Object&#32;to&#32;access&#32;the&#32;TX&#32;class&#32;function&#32;without&#32;nesting&#32;any&#32;transaction&#32;*/</emphasis>
110 &#32;&#32;&#32;&#32;<link linkend="class_t_x">TX</link>&#32;tx(std::this_thread::get_id());
111 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@112&#32;getppid()&#32;return&#32;the&#32;actual&#32;main&#32;process&#32;thread&#32;id,&#32;I&#32;used&#32;it&#32;to&#32;associate&#32;the&#32;Transactionas&#32;with&#32;the&#32;main&#32;processes&#32;*/</emphasis>
112 &#32;&#32;&#32;&#32;pid_t&#32;ppid&#32;=&#32;getppid();
113 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@114&#32;process_map_collection&#32;try&#32;to&#32;find&#32;the&#32;main&#32;process&#32;by&#32;it&apos;s&#32;ppid&#32;if&#32;registred&#32;in&#32;the&#32;library&#32;*/</emphasis>
114 &#32;&#32;&#32;&#32;std::map&lt;pid_t,&#32;std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;&gt;::iterator&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_m_a6d417b18213968da2a70a914e80d639b_1a6d417b18213968da2a70a914e80d639b">TM::process_map_collection</link>.find(ppid);
115 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@116&#32;Check&#32;if&#32;iterator&#32;NOT&#32;pointing&#32;to&#32;the&#32;end&#32;of&#32;the&#32;process&#32;map&#32;then&#32;register&#32;*/</emphasis>
116 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(process_map_collection_Iterator&#32;!=&#32;<link linkend="class_t_m_a6d417b18213968da2a70a914e80d639b_1a6d417b18213968da2a70a914e80d639b">TM::process_map_collection</link>.end())&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@118&#32;Iterate&#32;through&#32;the&#32;process_map_collection&#32;to&#32;find&#32;all&#32;transaction&#32;associated&#32;with&#32;main&#32;process&#32;*/</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keyword">auto</emphasis>&#32;current&#32;=&#32;process_map_collection_Iterator-&gt;second.begin();&#32;current&#32;!=&#32;process_map_collection_Iterator-&gt;second.end();&#32;++current)&#32;{
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@120&#32;Delete&#32;all&#32;transaction&#32;associated&#32;with&#32;the&#32;actual&#32;main&#32;process&#32;*/</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.erase(current-&gt;first);
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@123&#32;When&#32;all&#32;transaction&#32;deleted,&#32;delete&#32;the&#32;main&#32;process&#32;from&#32;the&#32;Transacion&#32;Manager&#32;*/</emphasis>
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_m_a6d417b18213968da2a70a914e80d639b_1a6d417b18213968da2a70a914e80d639b">TM::process_map_collection</link>.erase(ppid);
124 &#32;&#32;&#32;&#32;}
125 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@126&#32;TX&#32;class&#32;delete&#32;all&#32;Global&#32;Object&#32;shared&#32;between&#32;the&#32;transaction.&#32;This&#32;function&#32;calls&#32;only&#32;when&#32;the&#32;main&#32;process&#32;exists&#32;to&#32;clear&#32;out&#32;memory&#32;*/</emphasis>
126 &#32;&#32;&#32;&#32;tx.<link linkend="class_t_x_aa9739c5c2077454c779098db7baefc2b_1aa9739c5c2077454c779098db7baefc2b">ostm_exit</link>();
127 }
<link linkend="class_t_m_a1d6891b1d3e71cc0acef54e7afe71c09_1a1d6891b1d3e71cc0acef54e7afe71c09">132 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_m_a1d6891b1d3e71cc0acef54e7afe71c09_1a1d6891b1d3e71cc0acef54e7afe71c09">TM::print_all</link>(){
133 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@134&#32;Locking&#32;the&#32;print&#32;function&#32;*/</emphasis>
134 &#32;&#32;&#32;&#32;<link linkend="class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_1a123bc5aa0766a7b909bebc54a429e5b0">get_Lock</link>.lock();
135 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@136&#32;Iterate&#32;through&#32;the&#32;txMap&#32;to&#32;print&#32;out&#32;the&#32;thread&#32;id&apos;s*/</emphasis>
136 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keyword">auto</emphasis>&#32;current&#32;=&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.begin();&#32;current&#32;!=&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.end();&#32;++current)&#32;{
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@138&#32;Print&#32;key&#32;(thread&#32;number)*/</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;KEY&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;current-&gt;first&#32;&lt;&lt;&#32;std::endl;
139 &#32;&#32;&#32;&#32;}
140 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@140&#32;Unlocking&#32;the&#32;print&#32;function*/</emphasis>
141 &#32;&#32;&#32;&#32;<link linkend="class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_1a123bc5aa0766a7b909bebc54a429e5b0">get_Lock</link>.unlock();
142 }
143 
<link linkend="class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_1afb8bc9f42fe06c52747beb7f4c46915c">148 </link>std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;&#32;<link linkend="class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_1afb8bc9f42fe06c52747beb7f4c46915c">TM::get_thread_Map</link>()&#32;{
149 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;&#32;@150&#32;thread_Map&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;&#32;create&#32;a&#32;map&#32;to&#32;store&#32;int&#32;key&#32;and&#32;int&#32;value&#32;*/</emphasis>&#32;
150 &#32;&#32;&#32;&#32;std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;&#32;thread_Map;
151 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;@152&#32;return&#32;the&#32;map&#32;*/</emphasis>
152 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;thread_Map;
153 }
    </computeroutput></literallayout>
</section>
