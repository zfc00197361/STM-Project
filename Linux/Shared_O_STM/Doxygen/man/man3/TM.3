.TH "TM" 3 "Sat Feb 24 2018" "Version v0.1" "O_STM" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TM \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TM\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::shared_ptr< \fBTX\fP > const \fB_get_tx\fP ()"
.br
.RI "\fI_get_tx std::shared_ptr<TX>, returning a shared pointer with the transaction \fP"
.ti -1c
.RI "void \fB_TX_EXIT\fP ()"
.br
.RI "\fI_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process \fP"
.ti -1c
.RI "void \fBprint_all\fP ()"
.br
.RI "\fIONLY FOR TESTING print_all void, print out all object key from txMAP collection\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBTM\fP & \fBInstance\fP ()"
.br
.RI "\fIScott Meyer's Singleton creation, what is thread safe\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 56 of file TM\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "std::shared_ptr< \fBTX\fP > const TM::_get_tx ()"

.PP
_get_tx std::shared_ptr<TX>, returning a shared pointer with the transaction _get_tx std::shared_ptr<TX>, return a shared_ptr with the Transaction object, if \fBTX\fP not exists then create one, else increasing the nesting level  std::mutex, protect shared collection from critical section
.PP
\fBParameters:\fP
.RS 4
\fIguard\fP std::lock_guard, locks the register_Lock mutex, unlock automatically when goes out of the scope 
.RE
.PP

.PP
Definition at line 77 of file TM\&.cpp\&.
.PP
.nf
78 {
79     std::lock_guard<std::mutex> guard(get_Lock);
80 
81     std::map<std::thread::id, std::shared_ptr<TX>>::iterator it = txMap\&.find(std::this_thread::get_id());
82     if(it == txMap\&.end())
83     {
84        registerTX();
85        it = txMap\&.find(std::this_thread::get_id());
86        
87     } else {
88         it->second->_increase_tx_nesting();
89     }
90     //it = txMap\&.find(std::this_thread::get_id());
91     
92 
93     return it->second;
94 
95 }
.fi
.SS "void TM::_TX_EXIT ()"

.PP
_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process _TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process  tx \fBTX\fP, local object to function in transaction 
.PP
Definition at line 100 of file TM\&.cpp\&.
.PP
References TX::ostm_exit()\&.
.PP
.nf
100                  {
101     TX tx(std::this_thread::get_id());
102     pid_t ppid = getppid();
103     std::map<pid_t, std::map< std::thread::id, int >>::iterator process_map_collection_Iterator = TM::process_map_collection\&.find(ppid);
104     if (process_map_collection_Iterator != TM::process_map_collection\&.end()) {
105 
106         for (auto current = process_map_collection_Iterator->second\&.begin(); current != process_map_collection_Iterator->second\&.end(); ++current) {
107             /*
108              * Delete all transaction associated with the actual main process
109              */
110             txMap\&.erase(current->first);
111         }
112         TM::process_map_collection\&.erase(ppid);
113 
114     }
115     tx\&.ostm_exit();
116 }
.fi
.SS "\fBTM\fP & TM::Instance ()\fC [static]\fP"

.PP
Scott Meyer's Singleton creation, what is thread safe\&. Instance \fBTM\fP, return the same singleton object to any process\&.
.PP
\fBParameters:\fP
.RS 4
\fI_instance\fP \fBTM\fP, static class reference to the instance of the Transaction Manager class 
.br
\fI_instance\fP ppid, assigning the process id whoever created the Singleton instance 
.RE
.PP

.PP
Definition at line 27 of file TM\&.cpp\&.
.PP
.nf
27                  {
28     static TM _instance;
29     _instance\&._tm_id = getpid();
30 
31     return _instance;
32 }
.fi
.SS "void TM::print_all ()"

.PP
ONLY FOR TESTING print_all void, print out all object key from txMAP collection\&. ONLY FOR TESTING print_all void, prints all object in the txMap 
.PP
Definition at line 120 of file TM\&.cpp\&.
.PP
.nf
120                   {
121     get_Lock\&.lock();
122     for (auto current = txMap\&.begin(); current != txMap\&.end(); ++current) {
123         std::cout << "KEY : " << current->first << std::endl;
124     }
125     get_Lock\&.unlock();
126 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for O_STM from the source code\&.
