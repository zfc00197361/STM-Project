<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_t_x_8cpp">
    <title>TX.cpp File Reference</title>
    <programlisting>#include &quot;TX.h&quot;</programlisting>
    <programlisting>#include &lt;iostream&gt;</programlisting>
<para>Include dependency diagram for TX.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="_t_x_8cpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for TX.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="_t_x_8cpp__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file TX.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">/*&#32;</emphasis>
2 <emphasis class="comment">&#32;*&#32;File:&#32;&#32;&#32;TX.cpp</emphasis>
3 <emphasis class="comment">&#32;*&#32;Author:&#32;Zoltan&#32;Fuzesi</emphasis>
4 <emphasis class="comment">&#32;*&#32;</emphasis>
5 <emphasis class="comment">&#32;*&#32;Created&#32;on&#32;December&#32;18,&#32;2017,&#32;2:09&#32;PM</emphasis>
6 <emphasis class="comment">&#32;*&#32;TX&#32;cpp&#32;file&#32;methods&#32;implementations</emphasis>
7 <emphasis class="comment">&#32;*/</emphasis>
8 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="_t_x_8h">TX.h</link>&quot;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
13 std::map&lt;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>;
17 std::map&lt;int,&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;&gt;&#32;<link linkend="class_t_x_aea5b8eedcd5059384155576b3979a5f6_1aea5b8eedcd5059384155576b3979a5f6">TX::process_map_collection</link>;
21 std::mutex&#32;<link linkend="class_t_x_aa688a8c96fa3cdf8cd92e267463536dc_1aa688a8c96fa3cdf8cd92e267463536dc">TX::register_Lock</link>;
25 <emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_t_x_a25838234aab99ae891a90eb8623a8b3c_1a25838234aab99ae891a90eb8623a8b3c">TX::test_counter</link>&#32;=&#32;0;
<link linkend="class_t_x_a8a4b83eab0171ae834bfa92bbced1094_1a8a4b83eab0171ae834bfa92bbced1094">31 </link><link linkend="class_t_x_a8a4b83eab0171ae834bfa92bbced1094_1a8a4b83eab0171ae834bfa92bbced1094">TX::TX</link>(std::thread::id&#32;<emphasis class="keywordtype">id</emphasis>)&#32;{
32 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_t_x_a145a1c74b521f277fe481971a930b249_1a145a1c74b521f277fe481971a930b249">transaction_Number</link>&#32;=&#32;id;
33 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_1ae8f413fd7f4fea322e7ad3c668f9898e">_tx_nesting_level</link>&#32;=&#32;0;
34 }
<link linkend="class_t_x_abecf854cc3228ab6dd51175b3cd1c70a_1abecf854cc3228ab6dd51175b3cd1c70a">38 </link><link linkend="class_t_x_abecf854cc3228ab6dd51175b3cd1c70a_1abecf854cc3228ab6dd51175b3cd1c70a">TX::~TX</link>()&#32;{
39 &#32;&#32;&#32;
40 }
<link linkend="class_t_x_ab96b3dd2bfd621b47307f0af3ec4f35c_1ab96b3dd2bfd621b47307f0af3ec4f35c">44 </link><link linkend="class_t_x_a8a4b83eab0171ae834bfa92bbced1094_1a8a4b83eab0171ae834bfa92bbced1094">TX::TX</link>(<emphasis class="keyword">const</emphasis>&#32;<link linkend="class_t_x">TX</link>&amp;&#32;orig)&#32;{
45 
46 }
47 
<link linkend="class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_1ae045534c4a9d39bd5c6ea2a39a372a79">52 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_1ae045534c4a9d39bd5c6ea2a39a372a79">TX::th_exit</link>()&#32;{
53 
54 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_1ae8f413fd7f4fea322e7ad3c668f9898e">_tx_nesting_level</link>&#32;&gt;&#32;0)&#32;{
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
56 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Active&#32;nested&#32;transactions&#32;running&#32;in&#32;background,&#32;do&#32;not&#32;delete&#32;anything&#32;yet</emphasis>
57 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
58 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;</emphasis>
60 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Remove&#32;all&#32;elements&#32;map&#32;entries&#32;from&#32;transaction&#32;and&#32;clear&#32;the&#32;map</emphasis>
61 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.clear();
63 &#32;&#32;&#32;&#32;}
64 }
65 
<link linkend="class_t_x_aa9739c5c2077454c779098db7baefc2b_1aa9739c5c2077454c779098db7baefc2b">72 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_aa9739c5c2077454c779098db7baefc2b_1aa9739c5c2077454c779098db7baefc2b">TX::ostm_exit</link>()&#32;{
73 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::shared_ptr&lt;OSTM&gt;&gt;::iterator&#32;main_Process_Map_collection_Iterator;
74 &#32;&#32;&#32;&#32;&#32;
75 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ppid&#32;=&#32;getpid();
76 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;&gt;::iterator&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_aea5b8eedcd5059384155576b3979a5f6_1aea5b8eedcd5059384155576b3979a5f6">TX::process_map_collection</link>.find(ppid);
77 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(process_map_collection_Iterator&#32;!=&#32;<link linkend="class_t_x_aea5b8eedcd5059384155576b3979a5f6_1aea5b8eedcd5059384155576b3979a5f6">TX::process_map_collection</link>.end())&#32;{
78 
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keyword">auto</emphasis>&#32;current&#32;=&#32;process_map_collection_Iterator-&gt;second.begin();&#32;current&#32;!=&#32;process_map_collection_Iterator-&gt;second.end();&#32;++current)&#32;{
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find(current-&gt;first);
81 
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(main_Process_Map_collection_Iterator&#32;!=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.end()){
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
84 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Delete&#32;element&#32;from&#32;shared&#32;main_Process_Map_collection&#32;by&#32;object&#32;unique&#32;key&#32;value,&#32;shared_ptr&#32;will&#32;destroy&#32;automatically</emphasis>
85 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.erase(main_Process_Map_collection_Iterator-&gt;first);&#32;&#32;&#32;&#32;&#32;&#32;
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
90 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Delete&#32;from&#32;Process_map_collection,&#32;Main&#32;process&#32;exits&#32;delete&#32;association&#32;with&#32;library</emphasis>
91 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_aea5b8eedcd5059384155576b3979a5f6_1aea5b8eedcd5059384155576b3979a5f6">TX::process_map_collection</link>.erase(process_map_collection_Iterator-&gt;first);
93 &#32;&#32;&#32;&#32;}
94 }
95 
<link linkend="class_t_x_abc32af2f51df97ac483e5bfe7db6ca6e_1abc32af2f51df97ac483e5bfe7db6ca6e">104 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_abc32af2f51df97ac483e5bfe7db6ca6e_1abc32af2f51df97ac483e5bfe7db6ca6e">TX::_register</link>(std::shared_ptr&lt;OSTM&gt;&#32;<emphasis class="keywordtype">object</emphasis>)&#32;{
105 &#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
106 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;MUST&#32;USE&#32;SHARED&#32;LOCK&#32;TO&#32;PROTECT&#32;SHARED&#32;GLOBAL&#32;MAP/COLLECTION&#32;</emphasis>
107 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
108 &#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;guard(<link linkend="class_t_x_aa688a8c96fa3cdf8cd92e267463536dc_1aa688a8c96fa3cdf8cd92e267463536dc">TX::register_Lock</link>);
109 &#32;&#32;&#32;&#32;
110 &#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
111 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Check&#32;for&#32;null&#32;pointer&#32;!</emphasis>
112 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Null&#32;pointer&#32;can&#32;cause&#32;segmentation&#32;fault!!!</emphasis>
113 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
114 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(<emphasis class="keywordtype">object</emphasis>&#32;==&#32;<emphasis class="keyword">nullptr</emphasis>){
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;NULL&#32;POINTER&#32;IN&#32;REGISTER&#32;FUNCTION]&quot;</emphasis>)&#32;);
116 &#32;&#32;&#32;&#32;}
117 &#32;&#32;&#32;&#32;
118 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ppid&#32;=&#32;getpid();
119 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;&gt;::iterator&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_aea5b8eedcd5059384155576b3979a5f6_1aea5b8eedcd5059384155576b3979a5f6">TX::process_map_collection</link>.find(ppid);
120 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(process_map_collection_Iterator&#32;==&#32;<link linkend="class_t_x_aea5b8eedcd5059384155576b3979a5f6_1aea5b8eedcd5059384155576b3979a5f6">TX::process_map_collection</link>.end())&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
122 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Register&#32;main&#32;process/application&#32;to&#32;the&#32;global&#32;map</emphasis>
123 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;map&#32;=&#32;&#32;<link linkend="class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_1a3f5671423cb7b9f9c98f8a25f2a4b545">get_thread_Map</link>();
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_aea5b8eedcd5059384155576b3979a5f6_1aea5b8eedcd5059384155576b3979a5f6">TX::process_map_collection</link>.insert({ppid,&#32;map});
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
127 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Get&#32;the&#32;map&#32;if&#32;registered&#32;first&#32;time</emphasis>
128 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_aea5b8eedcd5059384155576b3979a5f6_1aea5b8eedcd5059384155576b3979a5f6">TX::process_map_collection</link>.find(ppid);
130 &#32;&#32;&#32;&#32;}
131 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::shared_ptr&lt;OSTM&gt;&gt;::iterator&#32;main_Process_Map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find(object-&gt;Get_Unique_ID());
132 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(main_Process_Map_collection_Iterator&#32;==&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.end())&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
134 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Insert&#32;to&#32;the&#32;GLOBAL&#32;MAP&#32;</emphasis>
135 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.insert({<emphasis class="keywordtype">object</emphasis>-&gt;Get_Unique_ID(),&#32;<emphasis class="keywordtype">object</emphasis>});
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
138 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Insert&#32;to&#32;the&#32;GLOBAL&#32;MAP&#32;as&#32;a&#32;helper&#32;to&#32;clean&#32;up&#32;at&#32;end&#32;of&#32;main&#32;process&#32;</emphasis>
139 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process_map_collection_Iterator-&gt;second.insert({<emphasis class="keywordtype">object</emphasis>-&gt;Get_Unique_ID(),&#32;1});
141 &#32;&#32;&#32;&#32;}&#32;
142 
143 
144 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.find(object-&gt;Get_Unique_ID());
145 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;==&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end())&#32;{
146 
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.insert({<emphasis class="keywordtype">object</emphasis>-&gt;Get_Unique_ID(),&#32;<emphasis class="keywordtype">object</emphasis>-&gt;getBaseCopy(<emphasis class="keywordtype">object</emphasis>)});
148 &#32;&#32;&#32;&#32;}
149 
150 }
<link linkend="class_t_x_a1d78262b8831ddd042ed491f2e600e24_1a1d78262b8831ddd042ed491f2e600e24">155 </link>std::shared_ptr&lt;OSTM&gt;&#32;<link linkend="class_t_x_a1d78262b8831ddd042ed491f2e600e24_1a1d78262b8831ddd042ed491f2e600e24">TX::load</link>(std::shared_ptr&lt;OSTM&gt;&#32;<emphasis class="keywordtype">object</emphasis>)&#32;{
156 
157 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;working_Map_collection_Object_Shared_Pointer_Iterator;
158 &#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
159 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Check&#32;for&#32;null&#32;pointer&#32;!</emphasis>
160 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Null&#32;pointer&#32;can&#32;cause&#32;segmentation&#32;fault!!!</emphasis>
161 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
162 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(<emphasis class="keywordtype">object</emphasis>&#32;==&#32;<emphasis class="keyword">nullptr</emphasis>){
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;NULL&#32;POINTER&#32;IN&#32;LOAD&#32;FUNCTION]&quot;</emphasis>)&#32;);
164 &#32;&#32;&#32;&#32;}
165 
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.find(object-&gt;Get_Unique_ID());
167 
168 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end())&#32;{
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;getBaseCopy(working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second);
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
172 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;NO&#32;OBJECT&#32;FOUND&#32;LOAD&#32;FUNCTION]&quot;</emphasis>)&#32;);}
173 }
<link linkend="class_t_x_a7dbcb369aa4a3370b6c6829d278ece5d_1a7dbcb369aa4a3370b6c6829d278ece5d">178 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_a7dbcb369aa4a3370b6c6829d278ece5d_1a7dbcb369aa4a3370b6c6829d278ece5d">TX::store</link>(std::shared_ptr&lt;OSTM&gt;&#32;<emphasis class="keywordtype">object</emphasis>)&#32;{
179 &#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
180 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Check&#32;for&#32;null&#32;pointer&#32;!</emphasis>
181 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Null&#32;pointer&#32;can&#32;cause&#32;segmentation&#32;fault!!!</emphasis>
182 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
183 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(<emphasis class="keywordtype">object</emphasis>&#32;==&#32;<emphasis class="keyword">nullptr</emphasis>){
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;NULL&#32;POINTER&#32;IN&#32;STORE&#32;FUNCTION]&quot;</emphasis>)&#32;);
185 &#32;&#32;&#32;&#32;}
186 &#32;&#32;&#32;&#32;
187 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;working_Map_collection_Object_Shared_Pointer_Iterator;
188 
189 &#32;&#32;&#32;&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.find(object-&gt;Get_Unique_ID());
190 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end())&#32;{
191 
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second&#32;=&#32;object;
193 
194 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;[ERROR&#32;STORE]&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;&#32;}
195 }
<link linkend="class_t_x_a9dde5d356b35e557448e58d260087356_1a9dde5d356b35e557448e58d260087356">202 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_t_x_a9dde5d356b35e557448e58d260087356_1a9dde5d356b35e557448e58d260087356">TX::commit</link>()&#32;{
203 
204 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;can_Commit&#32;=&#32;<emphasis class="keyword">true</emphasis>;
205 &#32;
206 &#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
207 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Dealing&#32;with&#32;nested&#32;transactions&#32;first&#32;</emphasis>
208 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
209 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_1ae8f413fd7f4fea322e7ad3c668f9898e">_tx_nesting_level</link>&#32;&gt;&#32;0)&#32;{
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_aa3ac499f576326588628ade96b27b4b1_1aa3ac499f576326588628ade96b27b4b1">_decrease_tx_nesting</link>();
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
212 &#32;&#32;&#32;&#32;}&#32;
213 &#32;&#32;&#32;&#32;
214 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;working_Map_collection_Object_Shared_Pointer_Iterator;
215 
216 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::shared_ptr&lt;OSTM&gt;&gt;::iterator&#32;main_Process_Map_collection_Iterator;
217 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.begin();&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end();&#32;working_Map_collection_Object_Shared_Pointer_Iterator++)&#32;{
218 
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find(working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;Get_Unique_ID());
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
221 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Throws&#32;runtime&#32;error&#32;if&#32;object&#32;can&#32;not&#32;find</emphasis>
222 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(main_Process_Map_collection_Iterator&#32;==&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.end())
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;CAN&apos;T&#32;FIND&#32;OBJECT&#32;COMMIT&#32;FUNCTION]&quot;</emphasis>));
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
227 
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
229 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Busy&#32;wait&#32;WHILE&#32;object&#32;locked&#32;by&#32;other&#32;thread</emphasis>
230 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>(!(main_Process_Map_collection_Iterator-&gt;second)-&gt;is_Locked());
232 
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(main_Process_Map_collection_Iterator-&gt;second-&gt;Get_Version()&#32;&gt;&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;Get_Version())&#32;{
234 
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;Set_Can_Commit(<emphasis class="keyword">false</emphasis>);
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_Commit&#32;=&#32;<emphasis class="keyword">false</emphasis>;
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">break</emphasis>;
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
239 
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;Set_Can_Commit(<emphasis class="keyword">true</emphasis>);
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
242 &#32;&#32;&#32;&#32;}
243 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!can_Commit)&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a25838234aab99ae891a90eb8623a8b3c_1a25838234aab99ae891a90eb8623a8b3c">TX::test_counter</link>&#32;+=&#32;1;
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.begin();&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end();&#32;working_Map_collection_Object_Shared_Pointer_Iterator++)&#32;{
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator&#32;&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find(working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;Get_Unique_ID());
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second)-&gt;copy(working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second,&#32;main_Process_Map_collection_Iterator-&gt;second);
249 
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_1a4c13d2015dc15d0f788fa9a1413f0463">_release_object_lock</link>();
253 
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">false</emphasis>;
255 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
257 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Commit&#32;changes</emphasis>
258 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.begin();&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end();&#32;working_Map_collection_Object_Shared_Pointer_Iterator++)&#32;{
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find((working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second)-&gt;Get_Unique_ID());
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(main_Process_Map_collection_Iterator&#32;!=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.end())&#32;{
263 
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(main_Process_Map_collection_Iterator-&gt;second)-&gt;copy(main_Process_Map_collection_Iterator-&gt;second,&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second);
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator-&gt;second-&gt;increase_VersionNumber();
266 
267 
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;CAN&apos;T&#32;FIND&#32;OBJECT&#32;COMMIT&#32;FUNCTION]&quot;</emphasis>));
270 
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
273 
274 
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_1a4c13d2015dc15d0f788fa9a1413f0463">_release_object_lock</link>();
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_1ae045534c4a9d39bd5c6ea2a39a372a79">th_exit</link>();
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
278 &#32;&#32;&#32;&#32;}
279 }<emphasis class="comment">//Commit&#32;finish</emphasis>
280 
<link linkend="class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_1a4c13d2015dc15d0f788fa9a1413f0463">286 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_1a4c13d2015dc15d0f788fa9a1413f0463">TX::_release_object_lock</link>(){
287 &#32;&#32;&#32;&#32;
288 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;working_Map_collection_Object_Shared_Pointer_Iterator;
289 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::shared_ptr&lt;OSTM&gt;&gt;::iterator&#32;main_Process_Map_collection_Iterator;
290 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.begin();&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end();&#32;working_Map_collection_Object_Shared_Pointer_Iterator++)&#32;{
291 
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find((working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second)-&gt;Get_Unique_ID());
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(main_Process_Map_collection_Iterator&#32;!=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.end())&#32;{
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
295 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Release&#32;object&#32;lock</emphasis>
296 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(main_Process_Map_collection_Iterator)-&gt;second-&gt;unlock_Mutex();
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
301 }
302 
<link linkend="class_t_x_a1384bdf12d795854b5d32e7f61ffbdb8_1a1384bdf12d795854b5d32e7f61ffbdb8">307 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_a1384bdf12d795854b5d32e7f61ffbdb8_1a1384bdf12d795854b5d32e7f61ffbdb8">TX::_increase_tx_nesting</link>()&#32;{
308 &#32;&#32;&#32;&#32;&#32;&#32;
309 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_1ae8f413fd7f4fea322e7ad3c668f9898e">_tx_nesting_level</link>&#32;+=&#32;1;
310 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;std::cout&#32;&lt;&lt;&#32;&quot;[this-&gt;_tx_nesting_level]&#32;=&#32;&quot;&#32;&lt;&lt;&#32;this-&gt;_tx_nesting_level&#32;&lt;&lt;&#32;std::endl;</emphasis>
311 }
<link linkend="class_t_x_aa3ac499f576326588628ade96b27b4b1_1aa3ac499f576326588628ade96b27b4b1">316 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_aa3ac499f576326588628ade96b27b4b1_1aa3ac499f576326588628ade96b27b4b1">TX::_decrease_tx_nesting</link>()&#32;{
317 &#32;&#32;&#32;<emphasis class="comment">//&#32;std::cout&#32;&lt;&lt;&#32;&quot;[this-&gt;_tx_nesting_level]&#32;=&#32;&quot;&#32;&lt;&lt;&#32;this-&gt;_tx_nesting_level&#32;&lt;&lt;&#32;std::endl;</emphasis>
318 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_1ae8f413fd7f4fea322e7ad3c668f9898e">_tx_nesting_level</link>&#32;-=&#32;1;
319 ;
320 }
<link linkend="class_t_x_ae9bf97930c4670f59d334b345353a71e_1ae9bf97930c4670f59d334b345353a71e">324 </link><emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_t_x_ae9bf97930c4670f59d334b345353a71e_1ae9bf97930c4670f59d334b345353a71e">TX::getTest_counter</link>()&#32;{
325 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_t_x_a25838234aab99ae891a90eb8623a8b3c_1a25838234aab99ae891a90eb8623a8b3c">TX::test_counter</link>;
326 }
<link linkend="class_t_x_a9eba04944d449285905b60ec47223cff_1a9eba04944d449285905b60ec47223cff">331 </link><emphasis class="keyword">const</emphasis>&#32;std::thread::id&#32;<link linkend="class_t_x_a9eba04944d449285905b60ec47223cff_1a9eba04944d449285905b60ec47223cff">TX::_get_tx_number</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
332 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_t_x_a145a1c74b521f277fe481971a930b249_1a145a1c74b521f277fe481971a930b249">transaction_Number</link>;
333 }
<link linkend="class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_1a3f5671423cb7b9f9c98f8a25f2a4b545">338 </link>std::map&lt;&#32;int,&#32;int&#32;&gt;&#32;<link linkend="class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_1a3f5671423cb7b9f9c98f8a25f2a4b545">TX::get_thread_Map</link>()&#32;{
339 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;&#32;thread_Map;
340 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;thread_Map;
341 }
342 
<link linkend="class_t_x_a3d96ed91eb9ec73e16589f705661c5a7_1a3d96ed91eb9ec73e16589f705661c5a7">346 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_a3d96ed91eb9ec73e16589f705661c5a7_1a3d96ed91eb9ec73e16589f705661c5a7">TX::_print_all_tx</link>()&#32;{
347 
348 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;[PRINTALLTHREAD]&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
349 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;it;
350 &#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
351 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;All&#32;registered&#32;thread&#32;id&#32;in&#32;the&#32;TX&#32;global&#32;</emphasis>
352 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
353 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ppid&#32;=&#32;getpid();
354 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;&gt;::iterator&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_aea5b8eedcd5059384155576b3979a5f6_1aea5b8eedcd5059384155576b3979a5f6">TX::process_map_collection</link>.find(ppid);
355 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(process_map_collection_Iterator&#32;!=&#32;<link linkend="class_t_x_aea5b8eedcd5059384155576b3979a5f6_1aea5b8eedcd5059384155576b3979a5f6">TX::process_map_collection</link>.end())&#32;{
356 
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keyword">auto</emphasis>&#32;current&#32;=&#32;process_map_collection_Iterator-&gt;second.begin();&#32;current&#32;!=&#32;process_map_collection_Iterator-&gt;second.end();&#32;++current)&#32;{
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.find(current-&gt;first);
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(it&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end()){
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;[Unique&#32;number&#32;]&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;it-&gt;second-&gt;Get_Unique_ID()&#32;&lt;&lt;&#32;std::endl;
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
362 
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
365 &#32;&#32;&#32;&#32;&#32;
366 &#32;&#32;&#32;&#32;}
367 }
    </computeroutput></literallayout>
</section>
