.TH "TM" 3 "Sun Apr 1 2018" "C++ Software transactional Memory" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TM \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TM\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::shared_ptr< \fBTX\fP > const \fB_get_tx\fP ()"
.br
.RI "\fI_get_tx std::shared_ptr<TX>, returning a shared pointer with the transaction \fP"
.ti -1c
.RI "void \fB_TX_EXIT\fP ()"
.br
.RI "\fI_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process \fP"
.ti -1c
.RI "void \fBprint_all\fP ()"
.br
.RI "\fIONLY FOR TESTING print_all void, print out all object key from txMAP collection\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBTM\fP & \fBInstance\fP ()"
.br
.RI "\fIScott Meyer's Singleton creation, what is thread safe\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "std::map< std::thread::id, int > \fBget_thread_Map\fP ()"
.br
.RI "\fIget_thread_Map returning and map to insert to the process_map_collection as an inner value \fP"
.ti -1c
.RI "\fBTM\fP & \fBoperator=\fP (const \fBTM\fP &)=delete"
.br
.RI "\fI\fBTM\fP copy operator, prevent from copying the Transaction Manager\&. \fP"
.ti -1c
.RI "void \fBregisterTX\fP ()"
.br
.RI "\fIregisterTX void, register transaction into txMap \fP"
.ti -1c
.RI "\fBTM\fP ()=default"
.br
.RI "\fI\fBTM\fP constructor, prevent from multiple instantiation\&. \fP"
.ti -1c
.RI "\fBTM\fP (const \fBTM\fP &)=delete"
.br
.RI "\fI\fBTM\fP copy constructor, prevent from copying the Transaction Manager\&. \fP"
.ti -1c
.RI "\fB~TM\fP ()=default"
.br
.RI "\fI\fBTM\fP de-constructor, prevent from deletion\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::mutex \fBget_Lock\fP"
.br
.ti -1c
.RI "std::mutex \fBregister_Lock\fP"
.br
.ti -1c
.RI "std::map< std::thread::id, std::shared_ptr< \fBTX\fP > > \fBtxMap\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static int \fB_tm_id\fP"
.br
.ti -1c
.RI "static std::map< int, std::map< std::thread::id, int > > \fBprocess_map_collection\fP"
.br
.RI "\fISTATIC GLOBAL MAP Collection to store all process associated keys to find when deleting transactions\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 80 of file TM\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "TM::TM ()\fC [private]\fP, \fC [default]\fP"

.PP
\fBTM\fP constructor, prevent from multiple instantiation\&. 
.SS "TM::~TM ()\fC [private]\fP, \fC [default]\fP"

.PP
\fBTM\fP de-constructor, prevent from deletion\&. 
.SS "TM::TM (const \fBTM\fP &)\fC [private]\fP, \fC [delete]\fP"

.PP
\fBTM\fP copy constructor, prevent from copying the Transaction Manager\&. 
.SH "Member Function Documentation"
.PP 
.SS "std::shared_ptr< \fBTX\fP > const TM::_get_tx ()"

.PP
_get_tx std::shared_ptr<TX>, returning a shared pointer with the transaction _get_tx std::shared_ptr<TX>, return a shared_ptr with the Transaction object, if \fBTX\fP not exists then create one, else increasing the nesting level  std::mutex, protect shared collection from critical section
.PP
\fBParameters:\fP
.RS 4
\fIguard\fP std::lock_guard, locks the register_Lock mutex, unlock automatically when goes out of the scope 
.RE
.PP

.PP
Definition at line 78 of file TM\&.cpp\&.
.PP
References get_Lock, registerTX(), and txMap\&.
.PP
Referenced by _complex_transfer_(), _complex_warehouse_transfer_(), _nested_warehouse_transfer_(), _nesting_(), _six_account_transfer_(), _two_account_transfer_(), _warehouse_transfer_(), and main()\&.
.PP
.nf
79 {
80     std::lock_guard<std::mutex> guard(get_Lock);
81 
82     std::map<std::thread::id, std::shared_ptr<TX>>::iterator it = txMap\&.find(std::this_thread::get_id());
83     if(it == txMap\&.end())
84     {
85        registerTX();
86        it = txMap\&.find(std::this_thread::get_id());
87        
88     } else {
89         it->second->_increase_tx_nesting();
90     }
91     //it = txMap\&.find(std::this_thread::get_id());
92     
93 
94     return it->second;
95 
96 }
.fi
.SS "void TM::_TX_EXIT ()"

.PP
_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process _TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process  tx \fBTX\fP, local object to function in transaction 
.PP
Definition at line 101 of file TM\&.cpp\&.
.PP
References TX::ostm_exit(), process_map_collection, and txMap\&.
.PP
Referenced by main()\&.
.PP
.nf
101                  {
102     TX tx(std::this_thread::get_id());
103     int ppid = getpid();
104     std::map<int, std::map< std::thread::id, int >>::iterator process_map_collection_Iterator = TM::process_map_collection\&.find(ppid);
105     if (process_map_collection_Iterator != TM::process_map_collection\&.end()) {
106 
107         for (auto current = process_map_collection_Iterator->second\&.begin(); current != process_map_collection_Iterator->second\&.end(); ++current) {
108             /*
109              * Delete all transaction associated with the actual main process
110              */
111             txMap\&.erase(current->first);
112         }
113         TM::process_map_collection\&.erase(ppid);
114 
115     }
116     tx\&.ostm_exit();
117 }
.fi
.SS "std::map< std::thread::id, int > TM::get_thread_Map ()\fC [private]\fP"

.PP
get_thread_Map returning and map to insert to the process_map_collection as an inner value get_thread_Map std::map, returning a map to store all unique ID from all objects from all transactions within the main process
.PP
\fBParameters:\fP
.RS 4
\fIthread_Map\fP std::map< int, int >, 
.RE
.PP

.PP
Definition at line 133 of file TM\&.cpp\&.
.PP
Referenced by registerTX()\&.
.PP
.nf
133                                               {
134     std::map< std::thread::id, int > thread_Map;
135     return thread_Map;
136 }
.fi
.SS "\fBTM\fP & TM::Instance ()\fC [static]\fP"

.PP
Scott Meyer's Singleton creation, what is thread safe\&. Instance \fBTM\fP, return the same singleton object to any process\&.
.PP
\fBParameters:\fP
.RS 4
\fI_instance\fP \fBTM\fP, static class reference to the instance of the Transaction Manager class 
.br
\fI_instance\fP ppid, assigning the process id whoever created the Singleton instance 
.RE
.PP

.PP
Definition at line 28 of file TM\&.cpp\&.
.PP
References _tm_id\&.
.PP
Referenced by main()\&.
.PP
.nf
28                  {
29     static TM _instance;
30     _instance\&._tm_id = getpid();
31 
32     return _instance;
33 }
.fi
.SS "\fBTM\fP& TM::operator= (const \fBTM\fP &)\fC [private]\fP, \fC [delete]\fP"

.PP
\fBTM\fP copy operator, prevent from copying the Transaction Manager\&. 
.SS "void TM::print_all ()"

.PP
ONLY FOR TESTING print_all void, print out all object key from txMAP collection\&. ONLY FOR TESTING print_all void, prints all object in the txMap 
.PP
Definition at line 121 of file TM\&.cpp\&.
.PP
References get_Lock, and txMap\&.
.PP
Referenced by main()\&.
.PP
.nf
121                   {
122     get_Lock\&.lock();
123     for (auto current = txMap\&.begin(); current != txMap\&.end(); ++current) {
124         std::cout << "KEY : " << current->first << std::endl;
125     }
126     get_Lock\&.unlock();
127 }
.fi
.SS "void TM::registerTX ()\fC [private]\fP"

.PP
registerTX void, register transaction into txMap registerTX void, register a new \fBTX\fP Transaction object into ythe txMap/Transaction Map to manage all the transactions within the shared library
.PP
\fBParameters:\fP
.RS 4
\fItxMap\fP std::map, collection to store all transaction created by the Transaction Manager 
.br
\fIregister_Lock\fP std::mutex, used by the lock_guard to protect shared map from race conditions 
.br
\fIguard\fP std::lock_guard, locks the register_Lock mutex, unlock automatically when goes out of the scope 
.RE
.PP

.PP
Definition at line 43 of file TM\&.cpp\&.
.PP
References get_thread_Map(), process_map_collection, register_Lock, and txMap\&.
.PP
Referenced by _get_tx()\&.
.PP
.nf
44 {
45     std::lock_guard<std::mutex> guard(register_Lock);
46     int ppid = getpid();
47     std::map<int, std::map< std::thread::id, int >>::iterator process_map_collection_Iterator = TM::process_map_collection\&.find(ppid);
48     if (process_map_collection_Iterator == TM::process_map_collection\&.end()) {
49         /*
50          * Register main process/application to the global map
51          */
52         std::map< std::thread::id, int >map = get_thread_Map();
53         TM::process_map_collection\&.insert({ppid, map});
54 
55     }
56     std::map<std::thread::id, std::shared_ptr < TX>>::iterator it = txMap\&.find(std::this_thread::get_id());
57     if (it == txMap\&.end()) {
58         std::shared_ptr<TX> _transaction_object(new TX(std::this_thread::get_id()));
59         txMap\&.insert({std::this_thread::get_id(), _transaction_object});
60         /*
61          * Get the map if registered first time
62          */
63         process_map_collection_Iterator = TM::process_map_collection\&.find(ppid);
64         /*
65          * Insert to the GLOBAL MAP as a helper to clean up at end of main process 
66          */
67         process_map_collection_Iterator->second\&.insert({std::this_thread::get_id(), 1});
68 
69     }
70 
71 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "int TM::_tm_id\fC [static]\fP, \fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fI_tm_id\fP pid_t, process id determine the actual process between process in the shared \fBOSTM\fP library 
.RE
.PP

.PP
Definition at line 126 of file TM\&.h\&.
.PP
Referenced by Instance()\&.
.SS "std::mutex TM::get_Lock\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIregister_Lock\fP std::mutex, used in the _get_tx function 
.RE
.PP

.PP
Definition at line 122 of file TM\&.h\&.
.PP
Referenced by _get_tx(), and print_all()\&.
.SS "std::map< int, std::map< std::thread::id, int > > TM::process_map_collection\fC [static]\fP, \fC [private]\fP"

.PP
STATIC GLOBAL MAP Collection to store all process associated keys to find when deleting transactions\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprocess_map_collection\fP std::map
.br
\fIstatic\fP Global std::map process_map_collection store all transactional objects/pointers 
.RE
.PP

.PP
Definition at line 106 of file TM\&.h\&.
.PP
Referenced by _TX_EXIT(), and registerTX()\&.
.SS "std::mutex TM::register_Lock\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIregister_Lock\fP std::mutex, used in the registerTX function 
.RE
.PP

.PP
Definition at line 118 of file TM\&.h\&.
.PP
Referenced by registerTX()\&.
.SS "std::map<std::thread::id, std::shared_ptr<\fBTX\fP> > TM::txMap\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fItxMap\fP std::map, store all transactional objects created with Transaction Manager 
.RE
.PP

.PP
Definition at line 101 of file TM\&.h\&.
.PP
Referenced by _get_tx(), _TX_EXIT(), print_all(), and registerTX()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for C++ Software transactional Memory from the source code\&.
