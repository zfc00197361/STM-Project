\hypertarget{_t_x_8cpp_source}{}\subsection{T\+X.\+cpp}

\begin{DoxyCode}
00001 \textcolor{comment}{/* }
00002 \textcolor{comment}{ * File:   TX.cpp}
00003 \textcolor{comment}{ * Author: Zoltan Fuzesi C00197361, }
00004 \textcolor{comment}{ * IT Carlow, Software Engineering, }
00005 \textcolor{comment}{ *}
00006 \textcolor{comment}{ * Supervisor : Joe Kehoe, }
00007 \textcolor{comment}{ *}
00008 \textcolor{comment}{ * C++ Software Transactional Memory, }
00009 \textcolor{comment}{ * }
00010 \textcolor{comment}{ * Created on December 18, 2017, 2:09 PM}
00011 \textcolor{comment}{ * OSTM base class function declarations.}
00012 \textcolor{comment}{ */}
00013 
00014 \textcolor{preprocessor}{#include "\hyperlink{_t_x_8h}{TX.h}"}
00015 \textcolor{preprocessor}{#include <iostream>}
00016 \textcolor{comment}{/*}
00017 \textcolor{comment}{ * @19 main\_Process\_Map\_collection, register static Global class level map to store all transactional
       objects/pointers}
00018 \textcolor{comment}{ */}
00019 std::map<int, std::shared\_ptr<OSTM> >\hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection};
00020 \textcolor{comment}{/*}
00021 \textcolor{comment}{ * @23 process\_map\_collection, register static Global class level map to store all transaction number
       associated with the main process}
00022 \textcolor{comment}{ */}
00023 std::map<pid\_t, std::map< int, int >> \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection};
00024 \textcolor{comment}{/*}
00025 \textcolor{comment}{ * @27 egister\_Lock, register static class level shared std:mutex to protect shared map during transaction
       registration}
00026 \textcolor{comment}{ */}
00027 std::mutex \hyperlink{class_t_x_aa688a8c96fa3cdf8cd92e267463536dc_aa688a8c96fa3cdf8cd92e267463536dc}{TX::register\_Lock};
00028 \textcolor{comment}{/*}
00029 \textcolor{comment}{ * @31 test\_counter, register class level Integer variable to store the umber of rollback happens, for
       testing purposes}
00030 \textcolor{comment}{ */}
00031 \textcolor{keywordtype}{int} \hyperlink{class_t_x_a25838234aab99ae891a90eb8623a8b3c_a25838234aab99ae891a90eb8623a8b3c}{TX::test\_counter} = 0;
\hypertarget{_t_x_8cpp_source.tex_l00036}{}\hyperlink{class_t_x_a8a4b83eab0171ae834bfa92bbced1094_a8a4b83eab0171ae834bfa92bbced1094}{00036} \hyperlink{class_t_x_a8a4b83eab0171ae834bfa92bbced1094_a8a4b83eab0171ae834bfa92bbced1094}{TX::TX}(std::thread::id \textcolor{keywordtype}{id}) \{
00038     this->\hyperlink{class_t_x_a145a1c74b521f277fe481971a930b249_a145a1c74b521f277fe481971a930b249}{transaction\_Number} = id;
00040     this->\hyperlink{class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_ae8f413fd7f4fea322e7ad3c668f9898e}{\_tx\_nesting\_level} = 0;
00041 \}
\hypertarget{_t_x_8cpp_source.tex_l00045}{}\hyperlink{class_t_x_abecf854cc3228ab6dd51175b3cd1c70a_abecf854cc3228ab6dd51175b3cd1c70a}{00045} \hyperlink{class_t_x_abecf854cc3228ab6dd51175b3cd1c70a_abecf854cc3228ab6dd51175b3cd1c70a}{TX::~TX}() \{
00047 \}
\hypertarget{_t_x_8cpp_source.tex_l00052}{}\hyperlink{class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_ae045534c4a9d39bd5c6ea2a39a372a79}{00052} \textcolor{keywordtype}{void} \hyperlink{class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_ae045534c4a9d39bd5c6ea2a39a372a79}{TX::th\_exit}() \{
00054     \textcolor{keywordflow}{if} (this->\hyperlink{class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_ae8f413fd7f4fea322e7ad3c668f9898e}{\_tx\_nesting\_level} > 0) \{
00055         \textcolor{comment}{/* Active nested transactions running in background, do not delete anything yet */}
00056     \} \textcolor{keywordflow}{else} \{
00057         \textcolor{comment}{/* Remove all elements map entries from transaction and clear the map */}
00058         \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.clear();
00059     \}
00060 \}
00061 
\hypertarget{_t_x_8cpp_source.tex_l00068}{}\hyperlink{class_t_x_aa9739c5c2077454c779098db7baefc2b_aa9739c5c2077454c779098db7baefc2b}{00068} \textcolor{keywordtype}{void} \hyperlink{class_t_x_aa9739c5c2077454c779098db7baefc2b_aa9739c5c2077454c779098db7baefc2b}{TX::ostm\_exit}() \{
00070     std::map<int, std::shared\_ptr<OSTM>>::iterator main\_Process\_Map\_collection\_Iterator;
00072     pid\_t ppid = getppid();
00074     std::map<pid\_t, std::map< int, int >>::iterator process\_map\_collection\_Iterator = 
      \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.find(ppid);
00076     \textcolor{keywordflow}{if} (process\_map\_collection\_Iterator != \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.end()) \{
00078         \textcolor{keywordflow}{for} (\textcolor{keyword}{auto} current = process\_map\_collection\_Iterator->second.begin(); current != 
      process\_map\_collection\_Iterator->second.end(); ++current) \{
00080             main\_Process\_Map\_collection\_Iterator = 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.find(current->first);
00082             \textcolor{keywordflow}{if} (main\_Process\_Map\_collection\_Iterator != 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.end())\{
00084                 \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.erase(
      main\_Process\_Map\_collection\_Iterator->first);      
00085             \}
00086         \}
00088         \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.erase(process\_map\_collection\_Iterator->first);
00089     \}
00090 \}
00091 
\hypertarget{_t_x_8cpp_source.tex_l00096}{}\hyperlink{class_t_x_abc32af2f51df97ac483e5bfe7db6ca6e_abc32af2f51df97ac483e5bfe7db6ca6e}{00096} \textcolor{keywordtype}{void} \hyperlink{class_t_x_abc32af2f51df97ac483e5bfe7db6ca6e_abc32af2f51df97ac483e5bfe7db6ca6e}{TX::\_register}(std::shared\_ptr<OSTM> \textcolor{keywordtype}{object}) \{
00098     std::lock\_guard<std::mutex> guard(\hyperlink{class_t_x_aa688a8c96fa3cdf8cd92e267463536dc_aa688a8c96fa3cdf8cd92e267463536dc}{TX::register\_Lock});
00100     \textcolor{keywordflow}{if}(\textcolor{keywordtype}{object} == \textcolor{keyword}{nullptr})\{
00101         \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : NULL POINTER IN REGISTER FUNCTION]"}) );
00102     \}
00104     pid\_t ppid = getppid();
00106     std::map<pid\_t, std::map< int, int >>::iterator process\_map\_collection\_Iterator = 
      \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.find(ppid);
00108     \textcolor{keywordflow}{if} (process\_map\_collection\_Iterator == \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.end()) \{
00110         std::map< int, int >map =  \hyperlink{class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_a3f5671423cb7b9f9c98f8a25f2a4b545}{get\_thread\_Map}();
00112         \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.insert(\{ppid, map\});
00114         process\_map\_collection\_Iterator = \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.find(ppid);
00115     \}
00117     std::map<int, std::shared\_ptr<OSTM>>::iterator main\_Process\_Map\_collection\_Iterator = 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.find(object->Get\_Unique\_ID());
00119     \textcolor{keywordflow}{if} (main\_Process\_Map\_collection\_Iterator == \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}
      .end()) \{
00121         \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.insert(\{\textcolor{keywordtype}{object}->Get\_Unique\_ID(), \textcolor{keywordtype}{
      object}\});
00123         process\_map\_collection\_Iterator->second.insert(\{\textcolor{keywordtype}{object}->Get\_Unique\_ID(), 1\});
00124     \} 
00126     std::map< int, std::shared\_ptr<OSTM> >::iterator working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator 
      = \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.find(object->Get\_Unique\_ID());
00128     \textcolor{keywordflow}{if} (working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator == 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.end()) \{
00130         \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.insert(\{\textcolor{keywordtype}{object}->Get\_Unique\_ID(), \textcolor{keywordtype}{object}->getBaseCopy(\textcolor{keywordtype}{
      object})\});
00131     \}
00132 \}
\hypertarget{_t_x_8cpp_source.tex_l00137}{}\hyperlink{class_t_x_a1d78262b8831ddd042ed491f2e600e24_a1d78262b8831ddd042ed491f2e600e24}{00137} std::shared\_ptr<OSTM> \hyperlink{class_t_x_a1d78262b8831ddd042ed491f2e600e24_a1d78262b8831ddd042ed491f2e600e24}{TX::load}(std::shared\_ptr<OSTM> \textcolor{keywordtype}{object}) \{
00139     std::map< int, std::shared\_ptr<OSTM> >::iterator working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator;
00141     \textcolor{keywordflow}{if}(\textcolor{keywordtype}{object} == \textcolor{keyword}{nullptr})\{
00142         \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : NULL POINTER IN LOAD FUNCTION]"}) );
00143     \}
00145     working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator = 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.find(object->Get\_Unique\_ID());
00147     \textcolor{keywordflow}{if} (working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator != 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.end()) \{
00149         \textcolor{keywordflow}{return} working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second->getBaseCopy(
      working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second);
00151     \} \textcolor{keywordflow}{else} \{ \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : NO OBJECT FOUND LOAD FUNCTION]"}) );\}
00152 \}
\hypertarget{_t_x_8cpp_source.tex_l00157}{}\hyperlink{class_t_x_a7dbcb369aa4a3370b6c6829d278ece5d_a7dbcb369aa4a3370b6c6829d278ece5d}{00157} \textcolor{keywordtype}{void} \hyperlink{class_t_x_a7dbcb369aa4a3370b6c6829d278ece5d_a7dbcb369aa4a3370b6c6829d278ece5d}{TX::store}(std::shared\_ptr<OSTM> \textcolor{keywordtype}{object}) \{
00159     \textcolor{keywordflow}{if}(\textcolor{keywordtype}{object} == \textcolor{keyword}{nullptr})\{
00160         \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : NULL POINTER IN STORE FUNCTION]"}) );
00161     \}
00163     std::map< int, std::shared\_ptr<OSTM> >::iterator working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator;
00165     working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator = 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.find(object->Get\_Unique\_ID());
00167     \textcolor{keywordflow}{if} (working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator != 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.end()) \{
00169         working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second = object;
00171     \} \textcolor{keywordflow}{else} \{ \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : NO OBJECT FOUND STORE FUNCTION, CANNOT
       STORE OBJECT]"}) );\}
00172 \}
\hypertarget{_t_x_8cpp_source.tex_l00177}{}\hyperlink{class_t_x_a9dde5d356b35e557448e58d260087356_a9dde5d356b35e557448e58d260087356}{00177} \textcolor{keywordtype}{bool} \hyperlink{class_t_x_a9dde5d356b35e557448e58d260087356_a9dde5d356b35e557448e58d260087356}{TX::commit}() \{
00179     \textcolor{keywordtype}{bool} can\_Commit = \textcolor{keyword}{true};
00181     \textcolor{keywordflow}{if} (this->\hyperlink{class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_ae8f413fd7f4fea322e7ad3c668f9898e}{\_tx\_nesting\_level} > 0) \{
00183         \hyperlink{class_t_x_aa3ac499f576326588628ade96b27b4b1_aa3ac499f576326588628ade96b27b4b1}{\_decrease\_tx\_nesting}();
00184         \textcolor{keywordflow}{return} \textcolor{keyword}{true};
00185     \} 
00187     std::map< int, std::shared\_ptr<OSTM> >::iterator working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator;
00189     std::map<int, std::shared\_ptr<OSTM>>::iterator main\_Process\_Map\_collection\_Iterator;
00191     \textcolor{keywordflow}{for} (working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator = 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.begin(); working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator
       != \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.end(); 
      working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator++) \{
00193             main\_Process\_Map\_collection\_Iterator = 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.find(
      working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second->Get\_Unique\_ID());
00195             \textcolor{keywordflow}{if}(main\_Process\_Map\_collection\_Iterator == 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.end())
00196             \{
00197                 \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : CAN'T FIND OBJECT COMMIT FUNCTION]"})
      );
00198             \}
00199 
00201         \textcolor{keywordflow}{while}(!(main\_Process\_Map\_collection\_Iterator->second)->is\_Locked());
00203         \textcolor{keywordflow}{if} (main\_Process\_Map\_collection\_Iterator->second->Get\_Version() > 
      working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second->Get\_Version()) \{
00205             working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second->Set\_Can\_Commit(\textcolor{keyword}{false});
00211 
00215 
00217 
00219 
00221 
00224 
00226 
00229 
00231 
00233 
00235 
00237 
00239 
00242 
00244 
00246 
\hypertarget{_t_x_8cpp_source.tex_l00253}{}\hyperlink{class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_a4c13d2015dc15d0f788fa9a1413f0463}{00253} 
00255 
00257 
00260 
00262 
00264 
\hypertarget{_t_x_8cpp_source.tex_l00272}{}\hyperlink{class_t_x_a1384bdf12d795854b5d32e7f61ffbdb8_a1384bdf12d795854b5d32e7f61ffbdb8}{00272} 
00274 
\hypertarget{_t_x_8cpp_source.tex_l00279}{}\hyperlink{class_t_x_aa3ac499f576326588628ade96b27b4b1_aa3ac499f576326588628ade96b27b4b1}{00279} 
00281 
\hypertarget{_t_x_8cpp_source.tex_l00287}{}\hyperlink{class_t_x_ae9bf97930c4670f59d334b345353a71e_ae9bf97930c4670f59d334b345353a71e}{00287} 
00289 
\hypertarget{_t_x_8cpp_source.tex_l00294}{}\hyperlink{class_t_x_a9eba04944d449285905b60ec47223cff_a9eba04944d449285905b60ec47223cff}{00294} 
00296 
\hypertarget{_t_x_8cpp_source.tex_l00301}{}\hyperlink{class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_a3f5671423cb7b9f9c98f8a25f2a4b545}{00301} 
00303 
00305 
\hypertarget{_t_x_8cpp_source.tex_l00311}{}\hyperlink{class_t_x_a3d96ed91eb9ec73e16589f705661c5a7_a3d96ed91eb9ec73e16589f705661c5a7}{00311} 
00313 
00315 
00317 
00319 
00321 
00323 
00325 
00327 
\end{DoxyCode}
