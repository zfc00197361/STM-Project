\hypertarget{class_t_x}{}\subsection{TX Class Reference}
\label{class_t_x}\index{TX@{TX}}


{\ttfamily \#include $<$T\+X.\+h$>$}



Collaboration diagram for TX\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=235pt]{class_t_x__coll__graph}
\end{center}
\end{figure}
\subsubsection*{Public Member Functions}
\begin{DoxyCompactItemize}
\item 
void \hyperlink{class_t_x_aa3ac499f576326588628ade96b27b4b1_aa3ac499f576326588628ade96b27b4b1}{\+\_\+decrease\+\_\+tx\+\_\+nesting} ()
\begin{DoxyCompactList}\small\item\em @279 \+\_\+decrease\+\_\+tx\+\_\+nesting decrease the value stored in \+\_\+tx\+\_\+nesting\+\_\+level by one, when outer transactions commit \end{DoxyCompactList}\item 
void \hyperlink{class_t_x_a1384bdf12d795854b5d32e7f61ffbdb8_a1384bdf12d795854b5d32e7f61ffbdb8}{\+\_\+increase\+\_\+tx\+\_\+nesting} ()
\begin{DoxyCompactList}\small\item\em @272 \+\_\+increase\+\_\+tx\+\_\+nesting increase the value stored in \+\_\+tx\+\_\+nesting\+\_\+level by one, indicate that the transaction was nested \end{DoxyCompactList}\item 
void \hyperlink{class_t_x_a3d96ed91eb9ec73e16589f705661c5a7_a3d96ed91eb9ec73e16589f705661c5a7}{\+\_\+print\+\_\+all\+\_\+tx} ()
\item 
void \hyperlink{class_t_x_abc32af2f51df97ac483e5bfe7db6ca6e_abc32af2f51df97ac483e5bfe7db6ca6e}{\+\_\+register} (std\+::shared\+\_\+ptr$<$ \hyperlink{class_o_s_t_m}{O\+S\+TM} $>$ object)
\begin{DoxyCompactList}\small\item\em register void, receives an std\+::shared\+\_\+ptr$<$\+O\+S\+T\+M$>$ that point to the original memory space to protect from reca conditions \end{DoxyCompactList}\item 
bool \hyperlink{class_t_x_a9dde5d356b35e557448e58d260087356_a9dde5d356b35e557448e58d260087356}{commit} ()
\begin{DoxyCompactList}\small\item\em @176 commit function, returns boolean value T\+R\+U\+E/\+F\+A\+L\+SE depends on the action taken within the function. if commit happens return T\+R\+UE, otherwise return F\+A\+L\+SE, indicate the transaction muist restart. \end{DoxyCompactList}\item 
int \hyperlink{class_t_x_ae9bf97930c4670f59d334b345353a71e_ae9bf97930c4670f59d334b345353a71e}{get\+Test\+\_\+counter} ()
\begin{DoxyCompactList}\small\item\em @287 get\+Test\+\_\+counter T\+E\+S\+T\+I\+NG O\+N\+L\+Y!!! returning the value of the test\+\_\+counter stored, representing the number of rollbacks \end{DoxyCompactList}\item 
std\+::shared\+\_\+ptr$<$ \hyperlink{class_o_s_t_m}{O\+S\+TM} $>$ \hyperlink{class_t_x_a1d78262b8831ddd042ed491f2e600e24_a1d78262b8831ddd042ed491f2e600e24}{load} (std\+::shared\+\_\+ptr$<$ \hyperlink{class_o_s_t_m}{O\+S\+TM} $>$ object)
\begin{DoxyCompactList}\small\item\em @137 load std\+::shared\+\_\+ptr$<$\+O\+S\+T\+M$>$, returning an \hyperlink{class_o_s_t_m}{O\+S\+TM} type shared pointer, that is copy of the original pointer stored in the working map, to work with during transaction life time \end{DoxyCompactList}\item 
void \hyperlink{class_t_x_aa9739c5c2077454c779098db7baefc2b_aa9739c5c2077454c779098db7baefc2b}{ostm\+\_\+exit} ()
\begin{DoxyCompactList}\small\item\em @68 ostm\+\_\+exit void, clear all elements from the shared global collections associated with the main process \end{DoxyCompactList}\item 
void \hyperlink{class_t_x_a7dbcb369aa4a3370b6c6829d278ece5d_a7dbcb369aa4a3370b6c6829d278ece5d}{store} (std\+::shared\+\_\+ptr$<$ \hyperlink{class_o_s_t_m}{O\+S\+TM} $>$ object)
\begin{DoxyCompactList}\small\item\em @157 store void, receive an \hyperlink{class_o_s_t_m}{O\+S\+TM} type shared pointer object to store the changes with the transaction copy object \end{DoxyCompactList}\item 
\hyperlink{class_t_x_a8a4b83eab0171ae834bfa92bbced1094_a8a4b83eab0171ae834bfa92bbced1094}{TX} (std\+::thread\+::id id)
\begin{DoxyCompactList}\small\item\em @36 Custom Constructor \end{DoxyCompactList}\item 
\hyperlink{class_t_x_ab96b3dd2bfd621b47307f0af3ec4f35c_ab96b3dd2bfd621b47307f0af3ec4f35c}{TX} (const \hyperlink{class_t_x}{TX} \&orig)
\item 
\hyperlink{class_t_x_abecf854cc3228ab6dd51175b3cd1c70a_abecf854cc3228ab6dd51175b3cd1c70a}{$\sim$\+TX} ()
\begin{DoxyCompactList}\small\item\em @45 De-\/constructor \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsubsection*{Static Public Attributes}
\begin{DoxyCompactItemize}
\item 
static int \hyperlink{class_t_x_a25838234aab99ae891a90eb8623a8b3c_a25838234aab99ae891a90eb8623a8b3c}{test\+\_\+counter} = 0
\end{DoxyCompactItemize}
\subsubsection*{Private Member Functions}
\begin{DoxyCompactItemize}
\item 
const std\+::thread\+::id \hyperlink{class_t_x_a9eba04944d449285905b60ec47223cff_a9eba04944d449285905b60ec47223cff}{\+\_\+get\+\_\+tx\+\_\+number} () const 
\begin{DoxyCompactList}\small\item\em @294 \+\_\+get\+\_\+tx\+\_\+number, returning the thread id that has assigned the given transaction \end{DoxyCompactList}\item 
void \hyperlink{class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_a4c13d2015dc15d0f788fa9a1413f0463}{\+\_\+release\+\_\+object\+\_\+lock} ()
\begin{DoxyCompactList}\small\item\em @253 \+\_\+release\+\_\+object\+\_\+lock void function, is get called from commit function, with the purpose to release the locks on all the objects participating in the transaction \end{DoxyCompactList}\item 
std\+::map$<$ int, int $>$ \hyperlink{class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_a3f5671423cb7b9f9c98f8a25f2a4b545}{get\+\_\+thread\+\_\+\+Map} ()
\begin{DoxyCompactList}\small\item\em @301 get\+\_\+thread\+\_\+\+Map, returning a map to store all unique ID from all objects from all transactions within the main process \end{DoxyCompactList}\item 
void \hyperlink{class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_ae045534c4a9d39bd5c6ea2a39a372a79}{th\+\_\+exit} ()
\begin{DoxyCompactList}\small\item\em @52 th\+\_\+exit void, delete all std\+::shared\+\_\+ptr$<$\+O\+S\+T\+M$>$ elements from working\+\_\+\+Map\+\_\+collection, that store pointers to working objects \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsubsection*{Private Attributes}
\begin{DoxyCompactItemize}
\item 
int \hyperlink{class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_ae8f413fd7f4fea322e7ad3c668f9898e}{\+\_\+tx\+\_\+nesting\+\_\+level}
\item 
std\+::thread\+::id \hyperlink{class_t_x_a145a1c74b521f277fe481971a930b249_a145a1c74b521f277fe481971a930b249}{transaction\+\_\+\+Number}
\item 
std\+::map$<$ int, std\+::shared\+\_\+ptr$<$ \hyperlink{class_o_s_t_m}{O\+S\+TM} $>$ $>$ \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\+\_\+\+Map\+\_\+collection}
\end{DoxyCompactItemize}
\subsubsection*{Static Private Attributes}
\begin{DoxyCompactItemize}
\item 
static std\+::map$<$ int, std\+::shared\+\_\+ptr$<$ \hyperlink{class_o_s_t_m}{O\+S\+TM} $>$ $>$ \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{main\+\_\+\+Process\+\_\+\+Map\+\_\+collection}
\item 
static std\+::map$<$ pid\+\_\+t, std\+::map$<$ int, int $>$ $>$ \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{process\+\_\+map\+\_\+collection}
\item 
static std\+::mutex \hyperlink{class_t_x_aa688a8c96fa3cdf8cd92e267463536dc_aa688a8c96fa3cdf8cd92e267463536dc}{register\+\_\+\+Lock}
\end{DoxyCompactItemize}
\subsubsection*{Friends}
\begin{DoxyCompactItemize}
\item 
class \hyperlink{class_t_x_adf1ccda799ef5c419cb43b8ae55eb45c_adf1ccda799ef5c419cb43b8ae55eb45c}{TM}
\end{DoxyCompactItemize}


\subsubsection{Detailed Description}


Definition at line \hyperlink{_t_x_8h_source_l00029}{29} of file \hyperlink{_t_x_8h_source}{T\+X.\+h}.



\subsubsection{Constructor \& Destructor Documentation}
\index{TX@{TX}!TX@{TX}}
\index{TX@{TX}!TX@{TX}}
\paragraph[{\texorpdfstring{T\+X(std\+::thread\+::id id)}{TX(std::thread::id id)}}]{\setlength{\rightskip}{0pt plus 5cm}T\+X\+::\+TX (
\begin{DoxyParamCaption}
\item[{std\+::thread\+::id}]{id}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_a8a4b83eab0171ae834bfa92bbced1094_a8a4b83eab0171ae834bfa92bbced1094}{}\label{class_t_x_a8a4b83eab0171ae834bfa92bbced1094_a8a4b83eab0171ae834bfa92bbced1094}


@36 Custom Constructor 


\begin{DoxyParams}{Parameters}
{\em id} & std\+::thread\+::id, represent the transaction number when to the Transaction\+Manager \\
\hline
\end{DoxyParams}
@38 Integer field $<$transaction\+\_\+\+Number$>$ indicates the transaction number to the Transaction manager

@40 Integer field $<$\+\_\+tx\+\_\+nesting\+\_\+level$>$ indicates the nesting level to the transaction itself 

Definition at line \hyperlink{_t_x_8cpp_source_l00036}{36} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.



References \hyperlink{_t_x_8h_source_l00101}{\+\_\+tx\+\_\+nesting\+\_\+level}, and \hyperlink{_t_x_8h_source_l00097}{transaction\+\_\+\+Number}.


\begin{DoxyCode}
00036                      \{
00038     this->\hyperlink{class_t_x_a145a1c74b521f277fe481971a930b249_a145a1c74b521f277fe481971a930b249}{transaction\_Number} = id;
00040     this->\hyperlink{class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_ae8f413fd7f4fea322e7ad3c668f9898e}{\_tx\_nesting\_level} = 0;
00041 \}
\end{DoxyCode}
\index{TX@{TX}!````~TX@{$\sim$\+TX}}
\index{````~TX@{$\sim$\+TX}!TX@{TX}}
\paragraph[{\texorpdfstring{$\sim$\+T\+X()}{~TX()}}]{\setlength{\rightskip}{0pt plus 5cm}T\+X\+::$\sim$\+TX (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_abecf854cc3228ab6dd51175b3cd1c70a_abecf854cc3228ab6dd51175b3cd1c70a}{}\label{class_t_x_abecf854cc3228ab6dd51175b3cd1c70a_abecf854cc3228ab6dd51175b3cd1c70a}


@45 De-\/constructor 

Delete the object. 

Definition at line \hyperlink{_t_x_8cpp_source_l00045}{45} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.


\begin{DoxyCode}
00045         \{
00047 \}
\end{DoxyCode}
\index{TX@{TX}!TX@{TX}}
\index{TX@{TX}!TX@{TX}}
\paragraph[{\texorpdfstring{T\+X(const T\+X \&orig)}{TX(const TX &orig)}}]{\setlength{\rightskip}{0pt plus 5cm}T\+X\+::\+TX (
\begin{DoxyParamCaption}
\item[{const {\bf TX} \&}]{orig}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_ab96b3dd2bfd621b47307f0af3ec4f35c_ab96b3dd2bfd621b47307f0af3ec4f35c}{}\label{class_t_x_ab96b3dd2bfd621b47307f0af3ec4f35c_ab96b3dd2bfd621b47307f0af3ec4f35c}


\subsubsection{Member Function Documentation}
\index{TX@{TX}!\+\_\+decrease\+\_\+tx\+\_\+nesting@{\+\_\+decrease\+\_\+tx\+\_\+nesting}}
\index{\+\_\+decrease\+\_\+tx\+\_\+nesting@{\+\_\+decrease\+\_\+tx\+\_\+nesting}!TX@{TX}}
\paragraph[{\texorpdfstring{\+\_\+decrease\+\_\+tx\+\_\+nesting()}{_decrease_tx_nesting()}}]{\setlength{\rightskip}{0pt plus 5cm}void T\+X\+::\+\_\+decrease\+\_\+tx\+\_\+nesting (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_aa3ac499f576326588628ade96b27b4b1_aa3ac499f576326588628ade96b27b4b1}{}\label{class_t_x_aa3ac499f576326588628ade96b27b4b1_aa3ac499f576326588628ade96b27b4b1}


@279 \+\_\+decrease\+\_\+tx\+\_\+nesting decrease the value stored in \+\_\+tx\+\_\+nesting\+\_\+level by one, when outer transactions commit 

@281 Decrease transaction nesting level 

Definition at line \hyperlink{_t_x_8cpp_source_l00279}{279} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.



Referenced by \hyperlink{_t_x_8cpp_source_l00177}{commit()}.


\begin{DoxyCode}
00279                               \{
00281     this->\hyperlink{class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_ae8f413fd7f4fea322e7ad3c668f9898e}{\_tx\_nesting\_level} -= 1;
00282 ;
00283 \}
\end{DoxyCode}


Here is the caller graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=315pt]{class_t_x_aa3ac499f576326588628ade96b27b4b1_aa3ac499f576326588628ade96b27b4b1_icgraph}
\end{center}
\end{figure}


\index{TX@{TX}!\+\_\+get\+\_\+tx\+\_\+number@{\+\_\+get\+\_\+tx\+\_\+number}}
\index{\+\_\+get\+\_\+tx\+\_\+number@{\+\_\+get\+\_\+tx\+\_\+number}!TX@{TX}}
\paragraph[{\texorpdfstring{\+\_\+get\+\_\+tx\+\_\+number() const }{_get_tx_number() const }}]{\setlength{\rightskip}{0pt plus 5cm}const std\+::thread\+::id T\+X\+::\+\_\+get\+\_\+tx\+\_\+number (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
) const\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_x_a9eba04944d449285905b60ec47223cff_a9eba04944d449285905b60ec47223cff}{}\label{class_t_x_a9eba04944d449285905b60ec47223cff_a9eba04944d449285905b60ec47223cff}


@294 \+\_\+get\+\_\+tx\+\_\+number, returning the thread id that has assigned the given transaction 

\+\_\+get\+\_\+tx\+\_\+number, returning the transaction uniqe identifier @296 Return the transaction nuber 

Definition at line \hyperlink{_t_x_8cpp_source_l00294}{294} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.


\begin{DoxyCode}
00294                                            \{
00296     \textcolor{keywordflow}{return} \hyperlink{class_t_x_a145a1c74b521f277fe481971a930b249_a145a1c74b521f277fe481971a930b249}{transaction\_Number};
00297 \}
\end{DoxyCode}
\index{TX@{TX}!\+\_\+increase\+\_\+tx\+\_\+nesting@{\+\_\+increase\+\_\+tx\+\_\+nesting}}
\index{\+\_\+increase\+\_\+tx\+\_\+nesting@{\+\_\+increase\+\_\+tx\+\_\+nesting}!TX@{TX}}
\paragraph[{\texorpdfstring{\+\_\+increase\+\_\+tx\+\_\+nesting()}{_increase_tx_nesting()}}]{\setlength{\rightskip}{0pt plus 5cm}void T\+X\+::\+\_\+increase\+\_\+tx\+\_\+nesting (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_a1384bdf12d795854b5d32e7f61ffbdb8_a1384bdf12d795854b5d32e7f61ffbdb8}{}\label{class_t_x_a1384bdf12d795854b5d32e7f61ffbdb8_a1384bdf12d795854b5d32e7f61ffbdb8}


@272 \+\_\+increase\+\_\+tx\+\_\+nesting increase the value stored in \+\_\+tx\+\_\+nesting\+\_\+level by one, indicate that the transaction was nested 

@274 Increase transaction nesting level 

Definition at line \hyperlink{_t_x_8cpp_source_l00272}{272} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.


\begin{DoxyCode}
00272                               \{
00274     this->\hyperlink{class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_ae8f413fd7f4fea322e7ad3c668f9898e}{\_tx\_nesting\_level} += 1;
00275 \}
\end{DoxyCode}
\index{TX@{TX}!\+\_\+print\+\_\+all\+\_\+tx@{\+\_\+print\+\_\+all\+\_\+tx}}
\index{\+\_\+print\+\_\+all\+\_\+tx@{\+\_\+print\+\_\+all\+\_\+tx}!TX@{TX}}
\paragraph[{\texorpdfstring{\+\_\+print\+\_\+all\+\_\+tx()}{_print_all_tx()}}]{\setlength{\rightskip}{0pt plus 5cm}void T\+X\+::\+\_\+print\+\_\+all\+\_\+tx (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_a3d96ed91eb9ec73e16589f705661c5a7_a3d96ed91eb9ec73e16589f705661c5a7}{}\label{class_t_x_a3d96ed91eb9ec73e16589f705661c5a7_a3d96ed91eb9ec73e16589f705661c5a7}
@311 \+\_\+print\+\_\+all\+\_\+tx, only for testing! Prints all transaction associated with the main procees.! @313 initialise Iterator

@315 getppid() return the actual main process thread id, I used it to associate the Transactionas with the main processes

\textquotesingle{}317 initialize and assign Iterator to process\+\_\+map\+\_\+collection, by the main process id (ppid)

@319 If there is an entry associated with the process then print out all transactions.

@321 Iterate through process\+\_\+map\+\_\+collection

@323 Assign value to iterator

@325 If value found, then print it

@327 print out the transaction number 

Definition at line \hyperlink{_t_x_8cpp_source_l00311}{311} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.


\begin{DoxyCode}
00311                        \{
00313     std::map< int, std::shared\_ptr<OSTM> >::iterator it;
00315     pid\_t ppid = getppid();
00317     std::map<pid\_t, std::map< int, int >>::iterator process\_map\_collection\_Iterator = 
      \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.find(ppid);
00319     \textcolor{keywordflow}{if} (process\_map\_collection\_Iterator != \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.end()) \{
00321         \textcolor{keywordflow}{for} (\textcolor{keyword}{auto} current = process\_map\_collection\_Iterator->second.begin(); current != 
      process\_map\_collection\_Iterator->second.end(); ++current) \{
00323             it = \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.find(current->first);
00325             \textcolor{keywordflow}{if}(it != \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.end())\{
00327                 std::cout << \textcolor{stringliteral}{"[Unique number ] : "} <<it->second->Get\_Unique\_ID() << std::endl;
00328             \} 
00329         \}
00330     \}
00331 \}\end{DoxyCode}
\index{TX@{TX}!\+\_\+register@{\+\_\+register}}
\index{\+\_\+register@{\+\_\+register}!TX@{TX}}
\paragraph[{\texorpdfstring{\+\_\+register(std\+::shared\+\_\+ptr$<$ O\+S\+T\+M $>$ object)}{_register(std::shared_ptr< OSTM > object)}}]{\setlength{\rightskip}{0pt plus 5cm}void T\+X\+::\+\_\+register (
\begin{DoxyParamCaption}
\item[{std\+::shared\+\_\+ptr$<$ {\bf O\+S\+TM} $>$}]{object}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_abc32af2f51df97ac483e5bfe7db6ca6e_abc32af2f51df97ac483e5bfe7db6ca6e}{}\label{class_t_x_abc32af2f51df97ac483e5bfe7db6ca6e_abc32af2f51df97ac483e5bfe7db6ca6e}


register void, receives an std\+::shared\+\_\+ptr$<$\+O\+S\+T\+M$>$ that point to the original memory space to protect from reca conditions 


\begin{DoxyParams}{Parameters}
{\em object} & std\+::shared\+\_\+ptr$<$\+O\+S\+T\+M$>$, is an original shared pointer point to the object memory space \\
\hline
\end{DoxyParams}
@98 register\+\_\+\+Lock(mutex) shared lock between all transaction. M\+U\+ST U\+SE S\+H\+A\+R\+ED L\+O\+CK TO P\+R\+O\+T\+E\+CT S\+H\+A\+R\+ED G\+L\+O\+B\+AL M\+A\+P/\+C\+O\+L\+L\+E\+C\+T\+I\+ON

@100 R\+U\+N\+T\+I\+ME E\+R\+R\+OR. Check for null pointer ! Null pointer can cause segmentation fault!!!

@104 getppid() return the actual main process thread id, I used it to associate the Transactionas with the main processes

@106 Declare and initialize Iterator for process\+\_\+map\+\_\+collection, find main process

@108 If iterator cannot find main process, then register

@110 Create new empty map

@112 Register main process/application to the global map

@114 Get the map if registered first time

@117 Declare and initialize Iterator for main\+\_\+\+Process\+\_\+\+Map\+\_\+collection, find by original object

@119 If object cannot find, then register

\textquotesingle{}121 Insert the origin object to the G\+L\+O\+B\+AL M\+AP shared between transactions

@123 Insert object ID to the G\+L\+O\+B\+AL M\+AP as a helper to clean up at end of main process, Second value (1) not specified yet

@126 Declare and initialize Iterator for working\+\_\+\+Map\+\_\+collection, find copy of the original object

@128 If copy of the object not found, then register

@130 Register transaction own copy of the original object 

Definition at line \hyperlink{_t_x_8cpp_source_l00096}{96} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.



References \hyperlink{_t_x_8cpp_source_l00301}{get\+\_\+thread\+\_\+\+Map()}, \hyperlink{_t_x_8h_source_l00105}{main\+\_\+\+Process\+\_\+\+Map\+\_\+collection}, \hyperlink{_t_x_8h_source_l00109}{process\+\_\+map\+\_\+collection}, \hyperlink{_t_x_8h_source_l00117}{register\+\_\+\+Lock}, and \hyperlink{_t_x_8h_source_l00093}{working\+\_\+\+Map\+\_\+collection}.


\begin{DoxyCode}
00096                                              \{
00098     std::lock\_guard<std::mutex> guard(\hyperlink{class_t_x_aa688a8c96fa3cdf8cd92e267463536dc_aa688a8c96fa3cdf8cd92e267463536dc}{TX::register\_Lock});
00100     \textcolor{keywordflow}{if}(\textcolor{keywordtype}{object} == \textcolor{keyword}{nullptr})\{
00101         \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : NULL POINTER IN REGISTER FUNCTION]"}) );
00102     \}
00104     pid\_t ppid = getppid();
00106     std::map<pid\_t, std::map< int, int >>::iterator process\_map\_collection\_Iterator = 
      \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.find(ppid);
00108     \textcolor{keywordflow}{if} (process\_map\_collection\_Iterator == \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.end()) \{
00110         std::map< int, int >map =  \hyperlink{class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_a3f5671423cb7b9f9c98f8a25f2a4b545}{get\_thread\_Map}();
00112         \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.insert(\{ppid, map\});
00114         process\_map\_collection\_Iterator = \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.find(ppid);
00115     \}
00117     std::map<int, std::shared\_ptr<OSTM>>::iterator main\_Process\_Map\_collection\_Iterator = 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.find(object->Get\_Unique\_ID());
00119     \textcolor{keywordflow}{if} (main\_Process\_Map\_collection\_Iterator == \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}
      .end()) \{
00121         \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.insert(\{\textcolor{keywordtype}{object}->Get\_Unique\_ID(), \textcolor{keywordtype}{
      object}\});
00123         process\_map\_collection\_Iterator->second.insert(\{\textcolor{keywordtype}{object}->Get\_Unique\_ID(), 1\});
00124     \} 
00126     std::map< int, std::shared\_ptr<OSTM> >::iterator working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator 
      = \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.find(object->Get\_Unique\_ID());
00128     \textcolor{keywordflow}{if} (working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator == 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.end()) \{
00130         \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.insert(\{\textcolor{keywordtype}{object}->Get\_Unique\_ID(), \textcolor{keywordtype}{object}->getBaseCopy(\textcolor{keywordtype}{
      object})\});
00131     \}
00132 \}
\end{DoxyCode}


Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=294pt]{class_t_x_abc32af2f51df97ac483e5bfe7db6ca6e_abc32af2f51df97ac483e5bfe7db6ca6e_cgraph}
\end{center}
\end{figure}


\index{TX@{TX}!\+\_\+release\+\_\+object\+\_\+lock@{\+\_\+release\+\_\+object\+\_\+lock}}
\index{\+\_\+release\+\_\+object\+\_\+lock@{\+\_\+release\+\_\+object\+\_\+lock}!TX@{TX}}
\paragraph[{\texorpdfstring{\+\_\+release\+\_\+object\+\_\+lock()}{_release_object_lock()}}]{\setlength{\rightskip}{0pt plus 5cm}void T\+X\+::\+\_\+release\+\_\+object\+\_\+lock (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_a4c13d2015dc15d0f788fa9a1413f0463}{}\label{class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_a4c13d2015dc15d0f788fa9a1413f0463}


@253 \+\_\+release\+\_\+object\+\_\+lock void function, is get called from commit function, with the purpose to release the locks on all the objects participating in the transaction 

\+\_\+release\+\_\+object\+\_\+lock, Release the locks on all Shared global objects used by the transaction @255 Declare Iterator for working\+\_\+\+Map\+\_\+collection

@255 Declare Iterator for working\+\_\+\+Map\+\_\+collection

@260 Find Global shared original object by the transaction object unique ID

@262 If object found, then release lock

@264 Release object lock 

Definition at line \hyperlink{_t_x_8cpp_source_l00253}{253} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.


\begin{DoxyCode}
00253                              \{
00255     std::map< int, std::shared\_ptr<OSTM> >::iterator working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator;
00257     std::map<int, std::shared\_ptr<OSTM>>::iterator main\_Process\_Map\_collection\_Iterator;
00258     \textcolor{keywordflow}{for} (working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator = 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.begin(); working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator
       != \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.end(); 
      working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator++) \{
00260             main\_Process\_Map\_collection\_Iterator = 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.find((
      working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second)->Get\_Unique\_ID());
00262             \textcolor{keywordflow}{if} (main\_Process\_Map\_collection\_Iterator != 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.end()) \{
00264                 (main\_Process\_Map\_collection\_Iterator)->second->unlock\_Mutex();
00265             \} 
00266         \}
00267 \}
\end{DoxyCode}
\index{TX@{TX}!commit@{commit}}
\index{commit@{commit}!TX@{TX}}
\paragraph[{\texorpdfstring{commit()}{commit()}}]{\setlength{\rightskip}{0pt plus 5cm}bool T\+X\+::commit (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_a9dde5d356b35e557448e58d260087356_a9dde5d356b35e557448e58d260087356}{}\label{class_t_x_a9dde5d356b35e557448e58d260087356_a9dde5d356b35e557448e58d260087356}


@176 commit function, returns boolean value T\+R\+U\+E/\+F\+A\+L\+SE depends on the action taken within the function. if commit happens return T\+R\+UE, otherwise return F\+A\+L\+SE, indicate the transaction muist restart. 

@179 Declare can\+\_\+\+Commit boolean variable

@182 Dealing with nested transactions first. if nesting level bigger than Z\+E\+RO do not commit yet

@183 Decrease nesting level \begin{DoxySeeAlso}{See also}
\hyperlink{class_t_x_aa3ac499f576326588628ade96b27b4b1_aa3ac499f576326588628ade96b27b4b1}{\+\_\+decrease\+\_\+tx\+\_\+nesting()}
\end{DoxySeeAlso}
@187 Declare and initialize Iterator for working\+\_\+\+Map\+\_\+collection

@189 Declare and initialize Iterator for main\+\_\+\+Process\+\_\+\+Map\+\_\+collectio

@191 Iterate through the working\+\_\+\+Map\+\_\+collection, for all associated copy objetcs

@193 Find the Original object in the Shared global colection by the copy object unique ID

@195 R\+U\+N\+T\+I\+ME E\+R\+R\+OR. If no object found ! Null pointer can cause segmentation fault!!!

@200 Busy waiting, If the object locked by another transaction, then waith until it\textquotesingle{}s get unlockec, then lock it

@203 Compare the original global object version number with the working object version number. If the version number not same, then it cannot coomit

@2005 Set object boolean value to F\+A\+L\+SE, cannot commit

\begin{DoxyVerb}can_Commit = false;
break;
\end{DoxyVerb}
 \} else \{ /$\ast$$\ast$ @210 If version number are has same value set object boolean value to T\+R\+UE

@214 IF can\+\_\+\+Commit boolean value setted for F\+A\+L\+SE then rollback all copy object in the transaction to the Global object values

@217 iterate through all transaction copy objects one by one

@219 Find the Global shared object by the transaction copy object unique ID

@221 Copy all Global shared original objects changed values by another transaction to the transaction copy objetcs

@224 When the transaction finish to change copying all values from original objects to local copy, then release all Global shared objects. \begin{DoxySeeAlso}{See also}
\hyperlink{class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_a4c13d2015dc15d0f788fa9a1413f0463}{\+\_\+release\+\_\+object\+\_\+lock()}
\end{DoxySeeAlso}
@226 Return F\+A\+L\+SE to indicate the transaction must restart !

@229 Iterate through working\+\_\+map\+\_\+collection. If no conflict detected in early stage in the transaction, then commit all the local changes to shared Global objects

@231 Find the Global shared object by the transaction copy object unique ID

@233 If Global shared object found then commit changes

@235 Copy over local transaction object values to original Global object

@237 Increase the version number in the original pointer

@195 R\+U\+N\+T\+I\+ME E\+R\+R\+OR. If no object found ! Null pointer can cause segmentation fault!!!

@242 When the transaction finish with commit all changes, then release all Global shared objects. \begin{DoxySeeAlso}{See also}
\hyperlink{class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_a4c13d2015dc15d0f788fa9a1413f0463}{\+\_\+release\+\_\+object\+\_\+lock()}
\end{DoxySeeAlso}
@244 Transaction object clean up all associated values, clean memory. \begin{DoxySeeAlso}{See also}
\hyperlink{class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_ae045534c4a9d39bd5c6ea2a39a372a79}{th\+\_\+exit()}
\end{DoxySeeAlso}
@246 Return T\+R\+UE, indicate the transaction has finished. 

Definition at line \hyperlink{_t_x_8cpp_source_l00177}{177} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.



References \hyperlink{_t_x_8cpp_source_l00279}{\+\_\+decrease\+\_\+tx\+\_\+nesting()}, \hyperlink{_t_x_8h_source_l00101}{\+\_\+tx\+\_\+nesting\+\_\+level}, \hyperlink{_t_x_8h_source_l00105}{main\+\_\+\+Process\+\_\+\+Map\+\_\+collection}, and \hyperlink{_t_x_8h_source_l00093}{working\+\_\+\+Map\+\_\+collection}.


\begin{DoxyCode}
00177                 \{
00179     \textcolor{keywordtype}{bool} can\_Commit = \textcolor{keyword}{true};
00181     \textcolor{keywordflow}{if} (this->\hyperlink{class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_ae8f413fd7f4fea322e7ad3c668f9898e}{\_tx\_nesting\_level} > 0) \{
00183         \hyperlink{class_t_x_aa3ac499f576326588628ade96b27b4b1_aa3ac499f576326588628ade96b27b4b1}{\_decrease\_tx\_nesting}();
00184         \textcolor{keywordflow}{return} \textcolor{keyword}{true};
00185     \} 
00187     std::map< int, std::shared\_ptr<OSTM> >::iterator working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator;
00189     std::map<int, std::shared\_ptr<OSTM>>::iterator main\_Process\_Map\_collection\_Iterator;
00191     \textcolor{keywordflow}{for} (working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator = 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.begin(); working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator
       != \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.end(); 
      working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator++) \{
00193             main\_Process\_Map\_collection\_Iterator = 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.find(
      working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second->Get\_Unique\_ID());
00195             \textcolor{keywordflow}{if}(main\_Process\_Map\_collection\_Iterator == 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.end())
00196             \{
00197                 \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : CAN'T FIND OBJECT COMMIT FUNCTION]"})
      );
00198             \}
00199 
00201         \textcolor{keywordflow}{while}(!(main\_Process\_Map\_collection\_Iterator->second)->is\_Locked());
00203         \textcolor{keywordflow}{if} (main\_Process\_Map\_collection\_Iterator->second->Get\_Version() > 
      working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second->Get\_Version()) \{
00205             working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second->Set\_Can\_Commit(\textcolor{keyword}{false});\end{DoxyCode}


Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=315pt]{class_t_x_a9dde5d356b35e557448e58d260087356_a9dde5d356b35e557448e58d260087356_cgraph}
\end{center}
\end{figure}


\index{TX@{TX}!get\+\_\+thread\+\_\+\+Map@{get\+\_\+thread\+\_\+\+Map}}
\index{get\+\_\+thread\+\_\+\+Map@{get\+\_\+thread\+\_\+\+Map}!TX@{TX}}
\paragraph[{\texorpdfstring{get\+\_\+thread\+\_\+\+Map()}{get_thread_Map()}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::map$<$ int, int $>$ T\+X\+::get\+\_\+thread\+\_\+\+Map (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_a3f5671423cb7b9f9c98f8a25f2a4b545}{}\label{class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_a3f5671423cb7b9f9c98f8a25f2a4b545}


@301 get\+\_\+thread\+\_\+\+Map, returning a map to store all unique ID from all objects from all transactions within the main process 

get\+\_\+thread\+\_\+\+Map, returning and map to insert to the process\+\_\+map\+\_\+collection as an inner value @303 initialize empty map hold int key and values

@305 Return the map 

Definition at line \hyperlink{_t_x_8cpp_source_l00301}{301} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.



Referenced by \hyperlink{_t_x_8cpp_source_l00096}{\+\_\+register()}.


\begin{DoxyCode}
00301                                       \{
00303     std::map< int, int > thread\_Map;
00305     \textcolor{keywordflow}{return} thread\_Map;
00306 \}
\end{DoxyCode}


Here is the caller graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=294pt]{class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_a3f5671423cb7b9f9c98f8a25f2a4b545_icgraph}
\end{center}
\end{figure}


\index{TX@{TX}!get\+Test\+\_\+counter@{get\+Test\+\_\+counter}}
\index{get\+Test\+\_\+counter@{get\+Test\+\_\+counter}!TX@{TX}}
\paragraph[{\texorpdfstring{get\+Test\+\_\+counter()}{getTest_counter()}}]{\setlength{\rightskip}{0pt plus 5cm}int T\+X\+::get\+Test\+\_\+counter (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_ae9bf97930c4670f59d334b345353a71e_ae9bf97930c4670f59d334b345353a71e}{}\label{class_t_x_ae9bf97930c4670f59d334b345353a71e_ae9bf97930c4670f59d334b345353a71e}


@287 get\+Test\+\_\+counter T\+E\+S\+T\+I\+NG O\+N\+L\+Y!!! returning the value of the test\+\_\+counter stored, representing the number of rollbacks 

@289 return class level value hold by test\+\_\+counter variable 

Definition at line \hyperlink{_t_x_8cpp_source_l00287}{287} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.


\begin{DoxyCode}
00287                         \{
00289     \textcolor{keywordflow}{return} \hyperlink{class_t_x_a25838234aab99ae891a90eb8623a8b3c_a25838234aab99ae891a90eb8623a8b3c}{TX::test\_counter};
00290 \}
\end{DoxyCode}
\index{TX@{TX}!load@{load}}
\index{load@{load}!TX@{TX}}
\paragraph[{\texorpdfstring{load(std\+::shared\+\_\+ptr$<$ O\+S\+T\+M $>$ object)}{load(std::shared_ptr< OSTM > object)}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::shared\+\_\+ptr$<$ {\bf O\+S\+TM} $>$ T\+X\+::load (
\begin{DoxyParamCaption}
\item[{std\+::shared\+\_\+ptr$<$ {\bf O\+S\+TM} $>$}]{object}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_a1d78262b8831ddd042ed491f2e600e24_a1d78262b8831ddd042ed491f2e600e24}{}\label{class_t_x_a1d78262b8831ddd042ed491f2e600e24_a1d78262b8831ddd042ed491f2e600e24}


@137 load std\+::shared\+\_\+ptr$<$\+O\+S\+T\+M$>$, returning an \hyperlink{class_o_s_t_m}{O\+S\+TM} type shared pointer, that is copy of the original pointer stored in the working map, to work with during transaction life time 


\begin{DoxyParams}{Parameters}
{\em object} & std\+::shared\+\_\+ptr$<$\+O\+S\+T\+M$>$, used as a reference to find transaction copy object by the object unique ID \\
\hline
\end{DoxyParams}
@139 Declare and initialize Iterator for working\+\_\+\+Map\+\_\+collection

@141 R\+U\+N\+T\+I\+ME E\+R\+R\+OR. Check for null pointer ! Null pointer can cause segmentation fault!!!

@145 Find copy object in working\+\_\+\+Map\+\_\+collection by the object unique ID

@147 If object found, then return it

@149 Returning a copy of the working copy object

@151 If no object found, throw runtime error 

Definition at line \hyperlink{_t_x_8cpp_source_l00137}{137} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.



References \hyperlink{_t_x_8h_source_l00093}{working\+\_\+\+Map\+\_\+collection}.


\begin{DoxyCode}
00137                                                        \{
00139     std::map< int, std::shared\_ptr<OSTM> >::iterator working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator;
00141     \textcolor{keywordflow}{if}(\textcolor{keywordtype}{object} == \textcolor{keyword}{nullptr})\{
00142         \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : NULL POINTER IN LOAD FUNCTION]"}) );
00143     \}
00145     working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator = 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.find(object->Get\_Unique\_ID());
00147     \textcolor{keywordflow}{if} (working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator != 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.end()) \{
00149         \textcolor{keywordflow}{return} working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second->getBaseCopy(
      working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second);  
00151     \} \textcolor{keywordflow}{else} \{ \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : NO OBJECT FOUND LOAD FUNCTION]"}) );\}
00152 \}
\end{DoxyCode}
\index{TX@{TX}!ostm\+\_\+exit@{ostm\+\_\+exit}}
\index{ostm\+\_\+exit@{ostm\+\_\+exit}!TX@{TX}}
\paragraph[{\texorpdfstring{ostm\+\_\+exit()}{ostm_exit()}}]{\setlength{\rightskip}{0pt plus 5cm}void T\+X\+::ostm\+\_\+exit (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_aa9739c5c2077454c779098db7baefc2b_aa9739c5c2077454c779098db7baefc2b}{}\label{class_t_x_aa9739c5c2077454c779098db7baefc2b_aa9739c5c2077454c779098db7baefc2b}


@68 ostm\+\_\+exit void, clear all elements from the shared global collections associated with the main process 


\begin{DoxyParams}{Parameters}
{\em main\+\_\+\+Process\+\_\+\+Map\+\_\+collection} & std\+::map, store all std\+::shared\+\_\+ptr$<$\+O\+S\+T\+M$>$ from all transaction shared between multiple processes \\
\hline
{\em process\+\_\+map\+\_\+collection} & std\+::map, store all unique id from all transaction within main process DO N\+OT C\+A\+LL T\+H\+IS M\+E\+T\+H\+OD E\+X\+P\+L\+I\+C\+I\+T\+L\+Y!!!!!! W\+I\+LL D\+E\+L\+E\+TE A\+LL P\+R\+O\+C\+E\+SS A\+S\+S\+O\+C\+I\+A\+T\+ED E\+L\+E\+M\+E\+N\+T\+S!!!! \\
\hline
\end{DoxyParams}
@70 Declare Iterator main\+\_\+\+Process\+\_\+\+Map\+\_\+collection\+\_\+\+Iterator

@72 getppid() return the actual main process thread id, I used it to associate the Transactionas with the main processes

@74 process\+\_\+map\+\_\+collection try to find the main process by it\textquotesingle{}s ppid if registred in the library

@76 Check if iterator N\+OT pointing to the end of the process\+\_\+map\+\_\+collection then remove all associated elements

@78 Iterate through the process\+\_\+map\+\_\+collection to find all transaction associated with main process

@80 Find the \hyperlink{class_o_s_t_m}{O\+S\+TM} object in the Global shared map

@82 If object found then delete it

@84 Delete element from shared main\+\_\+\+Process\+\_\+\+Map\+\_\+collection by object by the unique key, and the shaed\+\_\+ptr will destroy automatically

@88 Delete main process from Process\+\_\+map\+\_\+collection 

Definition at line \hyperlink{_t_x_8cpp_source_l00068}{68} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.



References \hyperlink{_t_x_8h_source_l00105}{main\+\_\+\+Process\+\_\+\+Map\+\_\+collection}, and \hyperlink{_t_x_8h_source_l00109}{process\+\_\+map\+\_\+collection}.



Referenced by \hyperlink{_t_m_8cpp_source_l00108}{T\+M\+::\+\_\+\+T\+X\+\_\+\+E\+X\+I\+T()}.


\begin{DoxyCode}
00068                    \{
00070     std::map<int, std::shared\_ptr<OSTM>>::iterator main\_Process\_Map\_collection\_Iterator;
00072     pid\_t ppid = getppid();
00074     std::map<pid\_t, std::map< int, int >>::iterator process\_map\_collection\_Iterator = 
      \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.find(ppid);
00076     \textcolor{keywordflow}{if} (process\_map\_collection\_Iterator != \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.end()) \{
00078         \textcolor{keywordflow}{for} (\textcolor{keyword}{auto} current = process\_map\_collection\_Iterator->second.begin(); current != 
      process\_map\_collection\_Iterator->second.end(); ++current) \{
00080             main\_Process\_Map\_collection\_Iterator = 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.find(current->first);
00082             \textcolor{keywordflow}{if} (main\_Process\_Map\_collection\_Iterator != 
      \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.end())\{
00084                 \hyperlink{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{TX::main\_Process\_Map\_collection}.erase(
      main\_Process\_Map\_collection\_Iterator->first);      
00085             \}
00086         \}
00088         \hyperlink{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{TX::process\_map\_collection}.erase(process\_map\_collection\_Iterator->first);
00089     \}
00090 \}
\end{DoxyCode}


Here is the caller graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=277pt]{class_t_x_aa9739c5c2077454c779098db7baefc2b_aa9739c5c2077454c779098db7baefc2b_icgraph}
\end{center}
\end{figure}


\index{TX@{TX}!store@{store}}
\index{store@{store}!TX@{TX}}
\paragraph[{\texorpdfstring{store(std\+::shared\+\_\+ptr$<$ O\+S\+T\+M $>$ object)}{store(std::shared_ptr< OSTM > object)}}]{\setlength{\rightskip}{0pt plus 5cm}void T\+X\+::store (
\begin{DoxyParamCaption}
\item[{std\+::shared\+\_\+ptr$<$ {\bf O\+S\+TM} $>$}]{object}
\end{DoxyParamCaption}
)}\hypertarget{class_t_x_a7dbcb369aa4a3370b6c6829d278ece5d_a7dbcb369aa4a3370b6c6829d278ece5d}{}\label{class_t_x_a7dbcb369aa4a3370b6c6829d278ece5d_a7dbcb369aa4a3370b6c6829d278ece5d}


@157 store void, receive an \hyperlink{class_o_s_t_m}{O\+S\+TM} type shared pointer object to store the changes with the transaction copy object 


\begin{DoxyParams}{Parameters}
{\em object} & std\+::shared\+\_\+ptr$<$\+O\+S\+T\+M$>$, receiving a changed shared pointer, that was returned from the load function \\
\hline
\end{DoxyParams}
@159 R\+U\+N\+T\+I\+ME E\+R\+R\+OR. Check for null pointer ! Null pointer can cause segmentation fault!!!

@163 Declare and initialize Iterator for working\+\_\+\+Map\+\_\+collection

@165 Find copy object in working\+\_\+\+Map\+\_\+collection by the object unique ID

@167 If object found, then replace it

@169 Replace copy object in working\+\_\+\+Map\+\_\+collection associated with the unique ID key

@171 If error happes during store procees throw runtime error 

Definition at line \hyperlink{_t_x_8cpp_source_l00157}{157} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.



References \hyperlink{_t_x_8h_source_l00093}{working\+\_\+\+Map\+\_\+collection}.


\begin{DoxyCode}
00157                                          \{
00159     \textcolor{keywordflow}{if}(\textcolor{keywordtype}{object} == \textcolor{keyword}{nullptr})\{
00160         \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : NULL POINTER IN STORE FUNCTION]"}) );
00161     \}
00163     std::map< int, std::shared\_ptr<OSTM> >::iterator working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator;
00165     working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator = 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.find(object->Get\_Unique\_ID());
00167     \textcolor{keywordflow}{if} (working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator != 
      \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.end()) \{
00169         working\_Map\_collection\_Object\_Shared\_Pointer\_Iterator->second = object;  
00171     \} \textcolor{keywordflow}{else} \{ \textcolor{keywordflow}{throw} std::runtime\_error(std::string(\textcolor{stringliteral}{"[RUNTIME ERROR : NO OBJECT FOUND STORE FUNCTION, CANNOT
       STORE OBJECT]"}) );\}
00172 \}
\end{DoxyCode}
\index{TX@{TX}!th\+\_\+exit@{th\+\_\+exit}}
\index{th\+\_\+exit@{th\+\_\+exit}!TX@{TX}}
\paragraph[{\texorpdfstring{th\+\_\+exit()}{th_exit()}}]{\setlength{\rightskip}{0pt plus 5cm}void T\+X\+::th\+\_\+exit (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_ae045534c4a9d39bd5c6ea2a39a372a79}{}\label{class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_ae045534c4a9d39bd5c6ea2a39a372a79}


@52 th\+\_\+exit void, delete all std\+::shared\+\_\+ptr$<$\+O\+S\+T\+M$>$ elements from working\+\_\+\+Map\+\_\+collection, that store pointers to working objects 

Clean up all associated values by the thread delete from working\+\_\+\+Map\+\_\+collection, it is an automated function by the transactions


\begin{DoxyParams}{Parameters}
{\em working\+\_\+\+Map\+\_\+collection} & std\+::map, store std\+::shared\+\_\+ptr$<$\+O\+S\+T\+M$>$ transaction pointers \\
\hline
\end{DoxyParams}
@54 If bigger than Z\+E\+RO, means active nested transactions running in background, do not delete anything yet 

Definition at line \hyperlink{_t_x_8cpp_source_l00052}{52} of file \hyperlink{_t_x_8cpp_source}{T\+X.\+cpp}.



References \hyperlink{_t_x_8h_source_l00101}{\+\_\+tx\+\_\+nesting\+\_\+level}, and \hyperlink{_t_x_8h_source_l00093}{working\+\_\+\+Map\+\_\+collection}.


\begin{DoxyCode}
00052                  \{
00054     \textcolor{keywordflow}{if} (this->\hyperlink{class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_ae8f413fd7f4fea322e7ad3c668f9898e}{\_tx\_nesting\_level} > 0) \{
00055         \textcolor{comment}{/* Active nested transactions running in background, do not delete anything yet */}
00056     \} \textcolor{keywordflow}{else} \{
00057         \textcolor{comment}{/* Remove all elements map entries from transaction and clear the map */}
00058         \hyperlink{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{working\_Map\_collection}.clear();
00059     \}
00060 \}
\end{DoxyCode}


\subsubsection{Friends And Related Function Documentation}
\index{TX@{TX}!TM@{TM}}
\index{TM@{TM}!TX@{TX}}
\paragraph[{\texorpdfstring{TM}{TM}}]{\setlength{\rightskip}{0pt plus 5cm}friend class {\bf TM}\hspace{0.3cm}{\ttfamily [friend]}}\hypertarget{class_t_x_adf1ccda799ef5c419cb43b8ae55eb45c_adf1ccda799ef5c419cb43b8ae55eb45c}{}\label{class_t_x_adf1ccda799ef5c419cb43b8ae55eb45c_adf1ccda799ef5c419cb43b8ae55eb45c}


Definition at line \hyperlink{_t_x_8h_source_l00074}{74} of file \hyperlink{_t_x_8h_source}{T\+X.\+h}.



\subsubsection{Member Data Documentation}
\index{TX@{TX}!\+\_\+tx\+\_\+nesting\+\_\+level@{\+\_\+tx\+\_\+nesting\+\_\+level}}
\index{\+\_\+tx\+\_\+nesting\+\_\+level@{\+\_\+tx\+\_\+nesting\+\_\+level}!TX@{TX}}
\paragraph[{\texorpdfstring{\+\_\+tx\+\_\+nesting\+\_\+level}{_tx_nesting_level}}]{\setlength{\rightskip}{0pt plus 5cm}int T\+X\+::\+\_\+tx\+\_\+nesting\+\_\+level\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_ae8f413fd7f4fea322e7ad3c668f9898e}{}\label{class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_ae8f413fd7f4fea322e7ad3c668f9898e}
\+\_\+tx\+\_\+nesting\+\_\+level, store integer value represent the ttransaction nesting level 

Definition at line \hyperlink{_t_x_8h_source_l00101}{101} of file \hyperlink{_t_x_8h_source}{T\+X.\+h}.



Referenced by \hyperlink{_t_x_8cpp_source_l00177}{commit()}, \hyperlink{_t_x_8cpp_source_l00052}{th\+\_\+exit()}, and \hyperlink{_t_x_8cpp_source_l00036}{T\+X()}.

\index{TX@{TX}!main\+\_\+\+Process\+\_\+\+Map\+\_\+collection@{main\+\_\+\+Process\+\_\+\+Map\+\_\+collection}}
\index{main\+\_\+\+Process\+\_\+\+Map\+\_\+collection@{main\+\_\+\+Process\+\_\+\+Map\+\_\+collection}!TX@{TX}}
\paragraph[{\texorpdfstring{main\+\_\+\+Process\+\_\+\+Map\+\_\+collection}{main_Process_Map_collection}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::map$<$ int, std\+::shared\+\_\+ptr$<$ {\bf O\+S\+TM} $>$ $>$ T\+X\+::main\+\_\+\+Process\+\_\+\+Map\+\_\+collection\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}\hypertarget{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}{}\label{class_t_x_a1a45d726894190695314464d7cd97c29_a1a45d726894190695314464d7cd97c29}
main\+\_\+\+Process\+\_\+\+Map\+\_\+collection, S\+T\+A\+T\+IC G\+L\+O\+B\+AL M\+AP Collection to store \hyperlink{class_o_s_t_m}{O\+S\+TM} parent based shared pointers to control/lock and compare objects version number within transactions 

Definition at line \hyperlink{_t_x_8h_source_l00105}{105} of file \hyperlink{_t_x_8h_source}{T\+X.\+h}.



Referenced by \hyperlink{_t_x_8cpp_source_l00096}{\+\_\+register()}, \hyperlink{_t_x_8cpp_source_l00177}{commit()}, and \hyperlink{_t_x_8cpp_source_l00068}{ostm\+\_\+exit()}.

\index{TX@{TX}!process\+\_\+map\+\_\+collection@{process\+\_\+map\+\_\+collection}}
\index{process\+\_\+map\+\_\+collection@{process\+\_\+map\+\_\+collection}!TX@{TX}}
\paragraph[{\texorpdfstring{process\+\_\+map\+\_\+collection}{process_map_collection}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::map$<$ pid\+\_\+t, std\+::map$<$ int, int $>$ $>$ T\+X\+::process\+\_\+map\+\_\+collection\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}\hypertarget{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}{}\label{class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f}
process\+\_\+map\+\_\+collection, S\+T\+A\+T\+IC G\+L\+O\+B\+AL M\+AP Collection to store all process associated keys to find when deleting transactions 

Definition at line \hyperlink{_t_x_8h_source_l00109}{109} of file \hyperlink{_t_x_8h_source}{T\+X.\+h}.



Referenced by \hyperlink{_t_x_8cpp_source_l00096}{\+\_\+register()}, and \hyperlink{_t_x_8cpp_source_l00068}{ostm\+\_\+exit()}.

\index{TX@{TX}!register\+\_\+\+Lock@{register\+\_\+\+Lock}}
\index{register\+\_\+\+Lock@{register\+\_\+\+Lock}!TX@{TX}}
\paragraph[{\texorpdfstring{register\+\_\+\+Lock}{register_Lock}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::mutex T\+X\+::register\+\_\+\+Lock\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}\hypertarget{class_t_x_aa688a8c96fa3cdf8cd92e267463536dc_aa688a8c96fa3cdf8cd92e267463536dc}{}\label{class_t_x_aa688a8c96fa3cdf8cd92e267463536dc_aa688a8c96fa3cdf8cd92e267463536dc}
register\+\_\+\+Lock, std\+::mutex to control shared access on M\+A\+IN M\+AP 

Definition at line \hyperlink{_t_x_8h_source_l00117}{117} of file \hyperlink{_t_x_8h_source}{T\+X.\+h}.



Referenced by \hyperlink{_t_x_8cpp_source_l00096}{\+\_\+register()}.

\index{TX@{TX}!test\+\_\+counter@{test\+\_\+counter}}
\index{test\+\_\+counter@{test\+\_\+counter}!TX@{TX}}
\paragraph[{\texorpdfstring{test\+\_\+counter}{test_counter}}]{\setlength{\rightskip}{0pt plus 5cm}int T\+X\+::test\+\_\+counter = 0\hspace{0.3cm}{\ttfamily [static]}}\hypertarget{class_t_x_a25838234aab99ae891a90eb8623a8b3c_a25838234aab99ae891a90eb8623a8b3c}{}\label{class_t_x_a25838234aab99ae891a90eb8623a8b3c_a25838234aab99ae891a90eb8623a8b3c}


Definition at line \hyperlink{_t_x_8h_source_l00082}{82} of file \hyperlink{_t_x_8h_source}{T\+X.\+h}.

\index{TX@{TX}!transaction\+\_\+\+Number@{transaction\+\_\+\+Number}}
\index{transaction\+\_\+\+Number@{transaction\+\_\+\+Number}!TX@{TX}}
\paragraph[{\texorpdfstring{transaction\+\_\+\+Number}{transaction_Number}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::thread\+::id T\+X\+::transaction\+\_\+\+Number\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_x_a145a1c74b521f277fe481971a930b249_a145a1c74b521f277fe481971a930b249}{}\label{class_t_x_a145a1c74b521f277fe481971a930b249_a145a1c74b521f277fe481971a930b249}
transaction\+\_\+\+Number, Returning the transaction number what is a registered thread number associated with the transaction 

Definition at line \hyperlink{_t_x_8h_source_l00097}{97} of file \hyperlink{_t_x_8h_source}{T\+X.\+h}.



Referenced by \hyperlink{_t_x_8cpp_source_l00036}{T\+X()}.

\index{TX@{TX}!working\+\_\+\+Map\+\_\+collection@{working\+\_\+\+Map\+\_\+collection}}
\index{working\+\_\+\+Map\+\_\+collection@{working\+\_\+\+Map\+\_\+collection}!TX@{TX}}
\paragraph[{\texorpdfstring{working\+\_\+\+Map\+\_\+collection}{working_Map_collection}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::map$<$ int, std\+::shared\+\_\+ptr$<${\bf O\+S\+TM}$>$ $>$ T\+X\+::working\+\_\+\+Map\+\_\+collection\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}{}\label{class_t_x_a81aafda16e2f20e36ec6c68e584668ff_a81aafda16e2f20e36ec6c68e584668ff}
working\+\_\+\+Map\+\_\+collection, Collection to store copy of \hyperlink{class_o_s_t_m}{O\+S\+TM} parent based original Global shared pointers to make invisible changes during isolated transaction 

Definition at line \hyperlink{_t_x_8h_source_l00093}{93} of file \hyperlink{_t_x_8h_source}{T\+X.\+h}.



Referenced by \hyperlink{_t_x_8cpp_source_l00096}{\+\_\+register()}, \hyperlink{_t_x_8cpp_source_l00177}{commit()}, \hyperlink{_t_x_8cpp_source_l00137}{load()}, \hyperlink{_t_x_8cpp_source_l00157}{store()}, and \hyperlink{_t_x_8cpp_source_l00052}{th\+\_\+exit()}.



The documentation for this class was generated from the following files\+:\begin{DoxyCompactItemize}
\item 
\hyperlink{_t_x_8h}{T\+X.\+h}\item 
\hyperlink{_t_x_8cpp}{T\+X.\+cpp}\end{DoxyCompactItemize}
