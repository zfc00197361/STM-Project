\hypertarget{class_t_m}{}\subsection{TM Class Reference}
\label{class_t_m}\index{TM@{TM}}


{\ttfamily \#include $<$T\+M.\+h$>$}



Collaboration diagram for TM\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=208pt]{class_t_m__coll__graph}
\end{center}
\end{figure}
\subsubsection*{Public Member Functions}
\begin{DoxyCompactItemize}
\item 
std\+::shared\+\_\+ptr$<$ \hyperlink{class_t_x}{TX} $>$ const \hyperlink{class_t_m_a41cb0226cc4080c931651b13f74a0075_a41cb0226cc4080c931651b13f74a0075}{\+\_\+get\+\_\+tx} ()
\begin{DoxyCompactList}\small\item\em @81 \+\_\+get\+\_\+tx std\+::shared\+\_\+ptr$<$\+T\+X$>$, return an trtansaction Object as a shared\+\_\+ptr, if \hyperlink{class_t_x}{TX} not exists then create and register.\# If the transaction Object exists then increasing the nesting level within the Transaction Object. \end{DoxyCompactList}\item 
void \hyperlink{class_t_m_a5e2d1127f2429f2f524d25f430eade06_a5e2d1127f2429f2f524d25f430eade06}{\+\_\+\+T\+X\+\_\+\+E\+X\+IT} ()
\begin{DoxyCompactList}\small\item\em @108 \+\_\+\+T\+X\+\_\+\+E\+X\+IT void, when the thread calls the ostm\+\_\+exit function in the transaction, and it will clear all elements from the shared global collection associated with the main process \end{DoxyCompactList}\item 
void \hyperlink{class_t_m_a1d6891b1d3e71cc0acef54e7afe71c09_a1d6891b1d3e71cc0acef54e7afe71c09}{print\+\_\+all} ()
\begin{DoxyCompactList}\small\item\em @132 O\+N\+LY F\+OR T\+E\+S\+T\+I\+NG print\+\_\+all void function , print out all object key from tx\+M\+AP collection associated with the main process. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsubsection*{Static Public Member Functions}
\begin{DoxyCompactItemize}
\item 
static \hyperlink{class_t_m}{TM} \& \hyperlink{class_t_m_a7ce5f35e0dae76df4fe116cf905bbe60_a7ce5f35e0dae76df4fe116cf905bbe60}{Instance} ()
\begin{DoxyCompactList}\small\item\em @31 Instance \hyperlink{class_t_m}{TM}, Scott Meyer\textquotesingle{}s Singleton creation, thread safe Transaction Manager instance creation. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsubsection*{Private Member Functions}
\begin{DoxyCompactItemize}
\item 
std\+::map$<$ std\+::thread\+::id, int $>$ \hyperlink{class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_afb8bc9f42fe06c52747beb7f4c46915c}{get\+\_\+thread\+\_\+\+Map} ()
\begin{DoxyCompactList}\small\item\em @148 get\+\_\+thread\+\_\+\+Map std\+::map, returning a map to store all unique ID from all objects from all transactions within the main processes \end{DoxyCompactList}\item 
\hyperlink{class_t_m}{TM} \& \hyperlink{class_t_m_a85a6b783f0566f0877bab6a7de977c0a_a85a6b783f0566f0877bab6a7de977c0a}{operator=} (const \hyperlink{class_t_m}{TM} \&)=delete
\begin{DoxyCompactList}\small\item\em \hyperlink{class_t_m}{TM} copy operator, prevent from copying the Transaction Manager. \end{DoxyCompactList}\item 
void \hyperlink{class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_a26ea481c24d9aa3aebd6dafb7253376e}{register\+TX} ()
\begin{DoxyCompactList}\small\item\em @45 register\+TX void function, register a new \hyperlink{class_t_x}{TX} Transaction object into ythe tx\+Map/\+Transaction Map to manage all the transactions within the shared library. \hyperlink{class_t_m}{TM} Transaction managger checking the Process ID existence in the process map collection, If not in the map then register. \end{DoxyCompactList}\item 
\hyperlink{class_t_m_a9b5afb6b9d7c5925ab5cc5c65078ac23_a9b5afb6b9d7c5925ab5cc5c65078ac23}{TM} ()=default
\item 
\hyperlink{class_t_m_a2d1de4a19f7ed6b2805ed6e955b8e45b_a2d1de4a19f7ed6b2805ed6e955b8e45b}{TM} (const \hyperlink{class_t_m}{TM} \&)=delete
\begin{DoxyCompactList}\small\item\em \hyperlink{class_t_m}{TM} copy constructor, prevent from copying the Transaction Manager. \end{DoxyCompactList}\item 
\hyperlink{class_t_m_a985f8cb24f685925ddd637c7030cd2b3_a985f8cb24f685925ddd637c7030cd2b3}{$\sim$\+TM} ()=default
\end{DoxyCompactItemize}
\subsubsection*{Private Attributes}
\begin{DoxyCompactItemize}
\item 
std\+::mutex \hyperlink{class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_a123bc5aa0766a7b909bebc54a429e5b0}{get\+\_\+\+Lock}
\item 
std\+::mutex \hyperlink{class_t_m_aeb26546681bfe64e21606b8c012bb8c3_aeb26546681bfe64e21606b8c012bb8c3}{register\+\_\+\+Lock}
\item 
std\+::map$<$ std\+::thread\+::id, std\+::shared\+\_\+ptr$<$ \hyperlink{class_t_x}{TX} $>$ $>$ \hyperlink{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}{tx\+Map}
\end{DoxyCompactItemize}
\subsubsection*{Static Private Attributes}
\begin{DoxyCompactItemize}
\item 
static pid\+\_\+t \hyperlink{class_t_m_a9d49d0ddef82337e54b684c9e1e8ad21_a9d49d0ddef82337e54b684c9e1e8ad21}{\+\_\+tm\+\_\+id}
\item 
static std\+::map$<$ pid\+\_\+t, std\+::map$<$ std\+::thread\+::id, int $>$ $>$ \hyperlink{class_t_m_a6d417b18213968da2a70a914e80d639b_a6d417b18213968da2a70a914e80d639b}{process\+\_\+map\+\_\+collection}
\end{DoxyCompactItemize}


\subsubsection{Detailed Description}


Definition at line \hyperlink{_t_m_8h_source_l00057}{57} of file \hyperlink{_t_m_8h_source}{T\+M.\+h}.



\subsubsection{Constructor \& Destructor Documentation}
\index{TM@{TM}!TM@{TM}}
\index{TM@{TM}!TM@{TM}}
\paragraph[{\texorpdfstring{T\+M()=default}{TM()=default}}]{\setlength{\rightskip}{0pt plus 5cm}T\+M\+::\+TM (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [private]}, {\ttfamily [default]}}\hypertarget{class_t_m_a9b5afb6b9d7c5925ab5cc5c65078ac23_a9b5afb6b9d7c5925ab5cc5c65078ac23}{}\label{class_t_m_a9b5afb6b9d7c5925ab5cc5c65078ac23_a9b5afb6b9d7c5925ab5cc5c65078ac23}
\index{TM@{TM}!````~TM@{$\sim$\+TM}}
\index{````~TM@{$\sim$\+TM}!TM@{TM}}
\paragraph[{\texorpdfstring{$\sim$\+T\+M()=default}{~TM()=default}}]{\setlength{\rightskip}{0pt plus 5cm}T\+M\+::$\sim$\+TM (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [private]}, {\ttfamily [default]}}\hypertarget{class_t_m_a985f8cb24f685925ddd637c7030cd2b3_a985f8cb24f685925ddd637c7030cd2b3}{}\label{class_t_m_a985f8cb24f685925ddd637c7030cd2b3_a985f8cb24f685925ddd637c7030cd2b3}
\index{TM@{TM}!TM@{TM}}
\index{TM@{TM}!TM@{TM}}
\paragraph[{\texorpdfstring{T\+M(const T\+M \&)=delete}{TM(const TM &)=delete}}]{\setlength{\rightskip}{0pt plus 5cm}T\+M\+::\+TM (
\begin{DoxyParamCaption}
\item[{const {\bf TM} \&}]{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [private]}, {\ttfamily [delete]}}\hypertarget{class_t_m_a2d1de4a19f7ed6b2805ed6e955b8e45b_a2d1de4a19f7ed6b2805ed6e955b8e45b}{}\label{class_t_m_a2d1de4a19f7ed6b2805ed6e955b8e45b_a2d1de4a19f7ed6b2805ed6e955b8e45b}


\hyperlink{class_t_m}{TM} copy constructor, prevent from copying the Transaction Manager. 



\subsubsection{Member Function Documentation}
\index{TM@{TM}!\+\_\+get\+\_\+tx@{\+\_\+get\+\_\+tx}}
\index{\+\_\+get\+\_\+tx@{\+\_\+get\+\_\+tx}!TM@{TM}}
\paragraph[{\texorpdfstring{\+\_\+get\+\_\+tx()}{_get_tx()}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::shared\+\_\+ptr$<$ {\bf TX} $>$ const T\+M\+::\+\_\+get\+\_\+tx (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{class_t_m_a41cb0226cc4080c931651b13f74a0075_a41cb0226cc4080c931651b13f74a0075}{}\label{class_t_m_a41cb0226cc4080c931651b13f74a0075_a41cb0226cc4080c931651b13f74a0075}


@81 \+\_\+get\+\_\+tx std\+::shared\+\_\+ptr$<$\+T\+X$>$, return an trtansaction Object as a shared\+\_\+ptr, if \hyperlink{class_t_x}{TX} not exists then create and register.\# If the transaction Object exists then increasing the nesting level within the Transaction Object. 

\+\_\+get\+\_\+tx std\+::shared\+\_\+ptr$<$\+T\+X$>$, returning a shared pointer transaction object @85 guard std\+::lock\+\_\+guard, locks the get\+\_\+\+Lock mutex, unlock automatically when goes out of the scope

@85 get\+\_\+\+Lock std\+::mutex, used by the lock\+\_\+guard to protect tx\+Map from race conditions

@87 tx\+Map try to find the \hyperlink{class_t_x}{TX} Transaction object by it\textquotesingle{}s actual thread ID if registred in the tx\+Map

@89 Check if iterator pointing to the end of the tx\+Map then insert

@92 If cannot find then call the register function to register the thread with a transaction

@94 If it\textquotesingle{}s registered first time then we need to find it after registration

@98 If transaction already registered, it means the thread participating in nested transactions, and increase the nesting

@101 Returning back the transaction (\hyperlink{class_t_x}{TX}) object to the thread 

Definition at line \hyperlink{_t_m_8cpp_source_l00081}{81} of file \hyperlink{_t_m_8cpp_source}{T\+M.\+cpp}.



References \hyperlink{_t_m_8h_source_l00098}{get\+\_\+\+Lock}, \hyperlink{_t_m_8cpp_source_l00045}{register\+T\+X()}, and \hyperlink{_t_m_8h_source_l00078}{tx\+Map}.


\begin{DoxyCode}
00082 \{
00085     std::lock\_guard<std::mutex> guard(\hyperlink{class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_a123bc5aa0766a7b909bebc54a429e5b0}{get\_Lock});
00087     std::map<std::thread::id, std::shared\_ptr<TX>>::iterator it = \hyperlink{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}{txMap}.find(std::this\_thread::get\_id(
      ));
00089     \textcolor{keywordflow}{if}(it == \hyperlink{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}{txMap}.end())
00090     \{
00092        \hyperlink{class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_a26ea481c24d9aa3aebd6dafb7253376e}{registerTX}();
00094        it = \hyperlink{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}{txMap}.find(std::this\_thread::get\_id());
00095        
00096     \} \textcolor{keywordflow}{else} \{
00098         it->second->\_increase\_tx\_nesting();
00099     \}
00101     \textcolor{keywordflow}{return} it->second;
00102 
00103 \}
\end{DoxyCode}


Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=350pt]{class_t_m_a41cb0226cc4080c931651b13f74a0075_a41cb0226cc4080c931651b13f74a0075_cgraph}
\end{center}
\end{figure}


\index{TM@{TM}!\+\_\+\+T\+X\+\_\+\+E\+X\+IT@{\+\_\+\+T\+X\+\_\+\+E\+X\+IT}}
\index{\+\_\+\+T\+X\+\_\+\+E\+X\+IT@{\+\_\+\+T\+X\+\_\+\+E\+X\+IT}!TM@{TM}}
\paragraph[{\texorpdfstring{\+\_\+\+T\+X\+\_\+\+E\+X\+I\+T()}{_TX_EXIT()}}]{\setlength{\rightskip}{0pt plus 5cm}void T\+M\+::\+\_\+\+T\+X\+\_\+\+E\+X\+IT (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{class_t_m_a5e2d1127f2429f2f524d25f430eade06_a5e2d1127f2429f2f524d25f430eade06}{}\label{class_t_m_a5e2d1127f2429f2f524d25f430eade06_a5e2d1127f2429f2f524d25f430eade06}


@108 \+\_\+\+T\+X\+\_\+\+E\+X\+IT void, when the thread calls the ostm\+\_\+exit function in the transaction, and it will clear all elements from the shared global collection associated with the main process 

\+\_\+\+T\+X\+\_\+\+E\+X\+IT void function, the thread (\hyperlink{class_t_x}{TX} object) calls the ostm\+\_\+exit function from the transaction, and clear all elements from the shared global collection associated with the main process @110 Transaction manger create a local Transaction Object to access the \hyperlink{class_t_x}{TX} class function without nesting any transaction

@112 getppid() return the actual main process thread id, I used it to associate the Transactionas with the main processes

@114 process\+\_\+map\+\_\+collection try to find the main process by it\textquotesingle{}s ppid if registred in the library

@116 Check if iterator N\+OT pointing to the end of the process map then register

@118 Iterate through the process\+\_\+map\+\_\+collection to find all transaction associated with main process

@120 Delete all transaction associated with the actual main process

@123 When all transaction deleted, delete the main process from the Transacion Manager

@126 \hyperlink{class_t_x}{TX} class delete all Global Object shared between the transaction. This function calls only when the main process exists to clear out memory 

Definition at line \hyperlink{_t_m_8cpp_source_l00108}{108} of file \hyperlink{_t_m_8cpp_source}{T\+M.\+cpp}.



References \hyperlink{_t_x_8cpp_source_l00068}{T\+X\+::ostm\+\_\+exit()}, \hyperlink{_t_m_8h_source_l00082}{process\+\_\+map\+\_\+collection}, and \hyperlink{_t_m_8h_source_l00078}{tx\+Map}.


\begin{DoxyCode}
00108                  \{
00110     \hyperlink{class_t_x}{TX} tx(std::this\_thread::get\_id());
00112     pid\_t ppid = getppid();
00114     std::map<pid\_t, std::map< std::thread::id, int >>::iterator process\_map\_collection\_Iterator = 
      \hyperlink{class_t_m_a6d417b18213968da2a70a914e80d639b_a6d417b18213968da2a70a914e80d639b}{TM::process\_map\_collection}.find(ppid);
00116     \textcolor{keywordflow}{if} (process\_map\_collection\_Iterator != \hyperlink{class_t_m_a6d417b18213968da2a70a914e80d639b_a6d417b18213968da2a70a914e80d639b}{TM::process\_map\_collection}.end()) \{
00118         \textcolor{keywordflow}{for} (\textcolor{keyword}{auto} current = process\_map\_collection\_Iterator->second.begin(); current != 
      process\_map\_collection\_Iterator->second.end(); ++current) \{
00120             \hyperlink{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}{txMap}.erase(current->first);
00121         \}
00123         \hyperlink{class_t_m_a6d417b18213968da2a70a914e80d639b_a6d417b18213968da2a70a914e80d639b}{TM::process\_map\_collection}.erase(ppid);
00124     \}
00126     tx.ostm\_exit();
00127 \}
\end{DoxyCode}


Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=277pt]{class_t_m_a5e2d1127f2429f2f524d25f430eade06_a5e2d1127f2429f2f524d25f430eade06_cgraph}
\end{center}
\end{figure}


\index{TM@{TM}!get\+\_\+thread\+\_\+\+Map@{get\+\_\+thread\+\_\+\+Map}}
\index{get\+\_\+thread\+\_\+\+Map@{get\+\_\+thread\+\_\+\+Map}!TM@{TM}}
\paragraph[{\texorpdfstring{get\+\_\+thread\+\_\+\+Map()}{get_thread_Map()}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::map$<$ std\+::thread\+::id, int $>$ T\+M\+::get\+\_\+thread\+\_\+\+Map (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_afb8bc9f42fe06c52747beb7f4c46915c}{}\label{class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_afb8bc9f42fe06c52747beb7f4c46915c}


@148 get\+\_\+thread\+\_\+\+Map std\+::map, returning a map to store all unique ID from all objects from all transactions within the main processes 

@150 thread\+\_\+\+Map std\+::map$<$ int, int $>$ create a map to store int key and int value

@152 return the map 

Definition at line \hyperlink{_t_m_8cpp_source_l00148}{148} of file \hyperlink{_t_m_8cpp_source}{T\+M.\+cpp}.



Referenced by \hyperlink{_t_m_8cpp_source_l00045}{register\+T\+X()}.


\begin{DoxyCode}
00148                                               \{ 
00150     std::map< std::thread::id, int > thread\_Map;
00152     \textcolor{keywordflow}{return} thread\_Map;
00153 \}\end{DoxyCode}


Here is the caller graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=350pt]{class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_afb8bc9f42fe06c52747beb7f4c46915c_icgraph}
\end{center}
\end{figure}


\index{TM@{TM}!Instance@{Instance}}
\index{Instance@{Instance}!TM@{TM}}
\paragraph[{\texorpdfstring{Instance()}{Instance()}}]{\setlength{\rightskip}{0pt plus 5cm}{\bf TM} \& T\+M\+::\+Instance (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [static]}}\hypertarget{class_t_m_a7ce5f35e0dae76df4fe116cf905bbe60_a7ce5f35e0dae76df4fe116cf905bbe60}{}\label{class_t_m_a7ce5f35e0dae76df4fe116cf905bbe60_a7ce5f35e0dae76df4fe116cf905bbe60}


@31 Instance \hyperlink{class_t_m}{TM}, Scott Meyer\textquotesingle{}s Singleton creation, thread safe Transaction Manager instance creation. 

Scott Meyer\textquotesingle{}s Singleton creation, thread safe Transaction Manager instance creation. @33 \+\_\+instance \hyperlink{class_t_m}{TM}, static class reference to the instance of the Transaction Manager class

@35 \+\_\+instance ppid, assigning the process id whoever created the Singleton instance

@37 return Singleton instance 

Definition at line \hyperlink{_t_m_8cpp_source_l00031}{31} of file \hyperlink{_t_m_8cpp_source}{T\+M.\+cpp}.



References \hyperlink{_t_m_8h_source_l00102}{\+\_\+tm\+\_\+id}.


\begin{DoxyCode}
00031                  \{
00033     \textcolor{keyword}{static} \hyperlink{class_t_m}{TM} \_instance;
00035     \_instance.\hyperlink{class_t_m_a9d49d0ddef82337e54b684c9e1e8ad21_a9d49d0ddef82337e54b684c9e1e8ad21}{\_tm\_id} = getpid();
00037     \textcolor{keywordflow}{return} \_instance;
00038 \}
\end{DoxyCode}
\index{TM@{TM}!operator=@{operator=}}
\index{operator=@{operator=}!TM@{TM}}
\paragraph[{\texorpdfstring{operator=(const T\+M \&)=delete}{operator=(const TM &)=delete}}]{\setlength{\rightskip}{0pt plus 5cm}{\bf TM}\& T\+M\+::operator= (
\begin{DoxyParamCaption}
\item[{const {\bf TM} \&}]{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [private]}, {\ttfamily [delete]}}\hypertarget{class_t_m_a85a6b783f0566f0877bab6a7de977c0a_a85a6b783f0566f0877bab6a7de977c0a}{}\label{class_t_m_a85a6b783f0566f0877bab6a7de977c0a_a85a6b783f0566f0877bab6a7de977c0a}


\hyperlink{class_t_m}{TM} copy operator, prevent from copying the Transaction Manager. 

\index{TM@{TM}!print\+\_\+all@{print\+\_\+all}}
\index{print\+\_\+all@{print\+\_\+all}!TM@{TM}}
\paragraph[{\texorpdfstring{print\+\_\+all()}{print_all()}}]{\setlength{\rightskip}{0pt plus 5cm}void T\+M\+::print\+\_\+all (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{class_t_m_a1d6891b1d3e71cc0acef54e7afe71c09_a1d6891b1d3e71cc0acef54e7afe71c09}{}\label{class_t_m_a1d6891b1d3e71cc0acef54e7afe71c09_a1d6891b1d3e71cc0acef54e7afe71c09}


@132 O\+N\+LY F\+OR T\+E\+S\+T\+I\+NG print\+\_\+all void function , print out all object key from tx\+M\+AP collection associated with the main process. 

O\+N\+LY F\+OR T\+E\+S\+T\+I\+N\+G! print\+\_\+all void function, prints all object in the tx\+Map @134 Locking the print function

@136 Iterate through the tx\+Map to print out the thread id\textquotesingle{}s

@138 Print key (thread number)

@140 Unlocking the print function 

Definition at line \hyperlink{_t_m_8cpp_source_l00132}{132} of file \hyperlink{_t_m_8cpp_source}{T\+M.\+cpp}.



References \hyperlink{_t_m_8h_source_l00098}{get\+\_\+\+Lock}, and \hyperlink{_t_m_8h_source_l00078}{tx\+Map}.


\begin{DoxyCode}
00132                   \{
00134     \hyperlink{class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_a123bc5aa0766a7b909bebc54a429e5b0}{get\_Lock}.lock();
00136     \textcolor{keywordflow}{for} (\textcolor{keyword}{auto} current = \hyperlink{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}{txMap}.begin(); current != \hyperlink{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}{txMap}.end(); ++current) \{
00138         std::cout << \textcolor{stringliteral}{"KEY : "} << current->first << std::endl;
00139     \}
00141     \hyperlink{class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_a123bc5aa0766a7b909bebc54a429e5b0}{get\_Lock}.unlock();
00142 \}
\end{DoxyCode}
\index{TM@{TM}!register\+TX@{register\+TX}}
\index{register\+TX@{register\+TX}!TM@{TM}}
\paragraph[{\texorpdfstring{register\+T\+X()}{registerTX()}}]{\setlength{\rightskip}{0pt plus 5cm}void T\+M\+::register\+TX (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_a26ea481c24d9aa3aebd6dafb7253376e}{}\label{class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_a26ea481c24d9aa3aebd6dafb7253376e}


@45 register\+TX void function, register a new \hyperlink{class_t_x}{TX} Transaction object into ythe tx\+Map/\+Transaction Map to manage all the transactions within the shared library. \hyperlink{class_t_m}{TM} Transaction managger checking the Process ID existence in the process map collection, If not in the map then register. 

@49 guard std\+::lock\+\_\+guard, locks the register\+\_\+\+Lock mutex, unlock automatically when goes out of the scope

@49 register\+\_\+\+Lock std\+::mutex, used by the lock\+\_\+guard to protect shared map from race conditions

@51 getppid() return the actual main process thread id, I used it to associate the Transactionas with the main processes

@53 process\+\_\+map\+\_\+collection try to find the main process by it\textquotesingle{}s ppid if registred in the library

@55 Check if iterator pointing to the end of the process map then register

@57 Require new map to insert to the process map as a value by the ppid key

@59 Register main process/application to the global map

@63 tx\+Map std\+::map, collection to store all transaction created by the Transaction Manager

@65 Check if iterator pointing to the end of the tx\+Map then insert

@67 Create a new Transaction Object as a shared pointer

@69 tx\+Map insert the new transaction into the tx\+Map by the thread\+ID key

@71 Get the map if the transaction registered first time

@73 Insert to the G\+L\+O\+B\+AL M\+AP as a helper to clean up at end of main process. The value 1 is not used yet 

Definition at line \hyperlink{_t_m_8cpp_source_l00045}{45} of file \hyperlink{_t_m_8cpp_source}{T\+M.\+cpp}.



References \hyperlink{_t_m_8cpp_source_l00148}{get\+\_\+thread\+\_\+\+Map()}, \hyperlink{_t_m_8h_source_l00082}{process\+\_\+map\+\_\+collection}, \hyperlink{_t_m_8h_source_l00094}{register\+\_\+\+Lock}, and \hyperlink{_t_m_8h_source_l00078}{tx\+Map}.



Referenced by \hyperlink{_t_m_8cpp_source_l00081}{\+\_\+get\+\_\+tx()}.


\begin{DoxyCode}
00046 \{
00049     std::lock\_guard<std::mutex> guard(\hyperlink{class_t_m_aeb26546681bfe64e21606b8c012bb8c3_aeb26546681bfe64e21606b8c012bb8c3}{register\_Lock});
00051     pid\_t ppid = getppid();
00053     std::map<pid\_t, std::map< std::thread::id, int >>::iterator process\_map\_collection\_Iterator = 
      \hyperlink{class_t_m_a6d417b18213968da2a70a914e80d639b_a6d417b18213968da2a70a914e80d639b}{TM::process\_map\_collection}.find(ppid);
00055     \textcolor{keywordflow}{if} (process\_map\_collection\_Iterator == \hyperlink{class_t_m_a6d417b18213968da2a70a914e80d639b_a6d417b18213968da2a70a914e80d639b}{TM::process\_map\_collection}.end()) \{
00057         std::map< std::thread::id, int >map = \hyperlink{class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_afb8bc9f42fe06c52747beb7f4c46915c}{get\_thread\_Map}();
00059         \hyperlink{class_t_m_a6d417b18213968da2a70a914e80d639b_a6d417b18213968da2a70a914e80d639b}{TM::process\_map\_collection}.insert(\{ppid, map\});
00060 
00061     \}
00063     std::map<std::thread::id, std::shared\_ptr < TX>>::iterator it = \hyperlink{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}{txMap}.find(
      std::this\_thread::get\_id());
00065     \textcolor{keywordflow}{if} (it == \hyperlink{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}{txMap}.end()) \{
00067         std::shared\_ptr<TX> \_transaction\_object(\textcolor{keyword}{new} \hyperlink{class_t_x}{TX}(std::this\_thread::get\_id()));
00069         \hyperlink{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}{txMap}.insert(\{std::this\_thread::get\_id(), \_transaction\_object\});
00071         process\_map\_collection\_Iterator = \hyperlink{class_t_m_a6d417b18213968da2a70a914e80d639b_a6d417b18213968da2a70a914e80d639b}{TM::process\_map\_collection}.find(ppid);
00073         process\_map\_collection\_Iterator->second.insert(\{std::this\_thread::get\_id(), 1\});
00074     \}
00075 \}
\end{DoxyCode}


Here is the call graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=305pt]{class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_a26ea481c24d9aa3aebd6dafb7253376e_cgraph}
\end{center}
\end{figure}




Here is the caller graph for this function\+:\nopagebreak
\begin{figure}[H]
\begin{center}
\leavevmode
\includegraphics[width=267pt]{class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_a26ea481c24d9aa3aebd6dafb7253376e_icgraph}
\end{center}
\end{figure}




\subsubsection{Member Data Documentation}
\index{TM@{TM}!\+\_\+tm\+\_\+id@{\+\_\+tm\+\_\+id}}
\index{\+\_\+tm\+\_\+id@{\+\_\+tm\+\_\+id}!TM@{TM}}
\paragraph[{\texorpdfstring{\+\_\+tm\+\_\+id}{_tm_id}}]{\setlength{\rightskip}{0pt plus 5cm}pid\+\_\+t T\+M\+::\+\_\+tm\+\_\+id\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}\hypertarget{class_t_m_a9d49d0ddef82337e54b684c9e1e8ad21_a9d49d0ddef82337e54b684c9e1e8ad21}{}\label{class_t_m_a9d49d0ddef82337e54b684c9e1e8ad21_a9d49d0ddef82337e54b684c9e1e8ad21}


Definition at line \hyperlink{_t_m_8h_source_l00102}{102} of file \hyperlink{_t_m_8h_source}{T\+M.\+h}.



Referenced by \hyperlink{_t_m_8cpp_source_l00031}{Instance()}.

\index{TM@{TM}!get\+\_\+\+Lock@{get\+\_\+\+Lock}}
\index{get\+\_\+\+Lock@{get\+\_\+\+Lock}!TM@{TM}}
\paragraph[{\texorpdfstring{get\+\_\+\+Lock}{get_Lock}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::mutex T\+M\+::get\+\_\+\+Lock\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_a123bc5aa0766a7b909bebc54a429e5b0}{}\label{class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_a123bc5aa0766a7b909bebc54a429e5b0}


Definition at line \hyperlink{_t_m_8h_source_l00098}{98} of file \hyperlink{_t_m_8h_source}{T\+M.\+h}.



Referenced by \hyperlink{_t_m_8cpp_source_l00081}{\+\_\+get\+\_\+tx()}, and \hyperlink{_t_m_8cpp_source_l00132}{print\+\_\+all()}.

\index{TM@{TM}!process\+\_\+map\+\_\+collection@{process\+\_\+map\+\_\+collection}}
\index{process\+\_\+map\+\_\+collection@{process\+\_\+map\+\_\+collection}!TM@{TM}}
\paragraph[{\texorpdfstring{process\+\_\+map\+\_\+collection}{process_map_collection}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::map$<$ pid\+\_\+t, std\+::map$<$ std\+::thread\+::id, int $>$ $>$ T\+M\+::process\+\_\+map\+\_\+collection\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}\hypertarget{class_t_m_a6d417b18213968da2a70a914e80d639b_a6d417b18213968da2a70a914e80d639b}{}\label{class_t_m_a6d417b18213968da2a70a914e80d639b_a6d417b18213968da2a70a914e80d639b}


Definition at line \hyperlink{_t_m_8h_source_l00082}{82} of file \hyperlink{_t_m_8h_source}{T\+M.\+h}.



Referenced by \hyperlink{_t_m_8cpp_source_l00108}{\+\_\+\+T\+X\+\_\+\+E\+X\+I\+T()}, and \hyperlink{_t_m_8cpp_source_l00045}{register\+T\+X()}.

\index{TM@{TM}!register\+\_\+\+Lock@{register\+\_\+\+Lock}}
\index{register\+\_\+\+Lock@{register\+\_\+\+Lock}!TM@{TM}}
\paragraph[{\texorpdfstring{register\+\_\+\+Lock}{register_Lock}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::mutex T\+M\+::register\+\_\+\+Lock\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_m_aeb26546681bfe64e21606b8c012bb8c3_aeb26546681bfe64e21606b8c012bb8c3}{}\label{class_t_m_aeb26546681bfe64e21606b8c012bb8c3_aeb26546681bfe64e21606b8c012bb8c3}


Definition at line \hyperlink{_t_m_8h_source_l00094}{94} of file \hyperlink{_t_m_8h_source}{T\+M.\+h}.



Referenced by \hyperlink{_t_m_8cpp_source_l00045}{register\+T\+X()}.

\index{TM@{TM}!tx\+Map@{tx\+Map}}
\index{tx\+Map@{tx\+Map}!TM@{TM}}
\paragraph[{\texorpdfstring{tx\+Map}{txMap}}]{\setlength{\rightskip}{0pt plus 5cm}std\+::map$<$std\+::thread\+::id, std\+::shared\+\_\+ptr$<${\bf TX}$>$ $>$ T\+M\+::tx\+Map\hspace{0.3cm}{\ttfamily [private]}}\hypertarget{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}{}\label{class_t_m_a0333dfa193ea99d7626de74a2b932e9b_a0333dfa193ea99d7626de74a2b932e9b}


Definition at line \hyperlink{_t_m_8h_source_l00078}{78} of file \hyperlink{_t_m_8h_source}{T\+M.\+h}.



Referenced by \hyperlink{_t_m_8cpp_source_l00081}{\+\_\+get\+\_\+tx()}, \hyperlink{_t_m_8cpp_source_l00108}{\+\_\+\+T\+X\+\_\+\+E\+X\+I\+T()}, \hyperlink{_t_m_8cpp_source_l00132}{print\+\_\+all()}, and \hyperlink{_t_m_8cpp_source_l00045}{register\+T\+X()}.



The documentation for this class was generated from the following files\+:\begin{DoxyCompactItemize}
\item 
\hyperlink{_t_m_8h}{T\+M.\+h}\item 
\hyperlink{_t_m_8cpp}{T\+M.\+cpp}\end{DoxyCompactItemize}
