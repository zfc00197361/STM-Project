<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="a00004">
<title>TM class Reference</title>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::map&lt; std::thread::id, std::shared_ptr&lt; TX &gt; &gt; txMap</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::mutex register_Lock</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::mutex get_Lock</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static std::map&lt; pid_t, std::map&lt; std::thread::id, int &gt; &gt; process_map_collection<para><emphasis>STATIC GLOBAL MAP Collection to store all process associated keys to find when deleting transactions.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static pid_t _tm_id</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="a00004_1a9b5afb6b9d7c5925ab5cc5c65078ac23">TM</link> (
)<para><emphasis>TM constructor, prevent from multiple instantiation.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="a00004_1a985f8cb24f685925ddd637c7030cd2b3">~TM</link> (
)<para><emphasis>TM de-constructor, prevent from deletion.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="a00004_1a2d1de4a19f7ed6b2805ed6e955b8e45b">TM</link> (
const <link linkend="a00004">TM</link> &amp; )<para><emphasis>TM copy constructor, prevent from copying the Transaction Manager.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="a00004">TM</link> &amp; <link linkend="a00004_1a85a6b783f0566f0877bab6a7de977c0a">operator=</link> (
const <link linkend="a00004">TM</link> &amp; )<para><emphasis>TM copy operator, prevent from copying the Transaction Manager.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::map&lt; std::thread::id, int &gt; <link linkend="a00004_1afb8bc9f42fe06c52747beb7f4c46915c">get_thread_Map</link> (
)<para><emphasis>get_thread_Map returning and map to insert to the process_map_collection as an inner value</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="a00004_1a26ea481c24d9aa3aebd6dafb7253376e">registerTX</link> (
)<para><emphasis>registerTX void, register transaction into txMap</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>static <link linkend="a00004">TM</link> &amp; <link linkend="a00004_1a7ce5f35e0dae76df4fe116cf905bbe60">Instance</link> (
)<para><emphasis>Scott Meyer&apos;s Singleton creation, what is thread safe.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::shared_ptr&lt; <link linkend="a00005">TX</link> &gt; const <link linkend="a00004_1a41cb0226cc4080c931651b13f74a0075">_get_tx</link> (
)<para><emphasis>_get_tx std::shared_ptr&lt;TX&gt;, returning a shared pointer with the transaction</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="a00004_1a5e2d1127f2429f2f524d25f430eade06">_TX_EXIT</link> (
)<para><emphasis>_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="a00004_1a1d6891b1d3e71cc0acef54e7afe71c09">print_all</link> (
)<para><emphasis>ONLY FOR TESTING print_all void, print out all object key from txMAP collection.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Member Data Documentation</title>
            <simplesect>
                <title>std::map&lt;std::thread::id, std::shared_ptr&lt;TX&gt; &gt; TM::txMap</title>                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>txMap</entry>
                                <entry>
<para>std::map, store all transactional objects created with Transaction Manager </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

                <para>Definition at line 70 of file TM.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>TM.h</para></listitem></itemizedlist></para>
            </simplesect>
            <simplesect>
                <title>std::mutex TM::register_Lock</title>                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>register_Lock</entry>
                                <entry>
<para>std::mutex, used in the registerTX function </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

                <para>Definition at line 87 of file TM.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>TM.h</para></listitem></itemizedlist></para>
            </simplesect>
            <simplesect>
                <title>std::mutex TM::get_Lock</title>                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>register_Lock</entry>
                                <entry>
<para>std::mutex, used in the _get_tx function </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

                <para>Definition at line 91 of file TM.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>TM.h</para></listitem></itemizedlist></para>
            </simplesect>
        </section>
            <simplesect>
                <title>std::map&lt; pid_t, std::map&lt; std::thread::id, int &gt; &gt; TM::process_map_collection</title>                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>process_map_collection</entry>
                                <entry>
<para>std::map</para>
</entry>
                            </row>
                            <row>
                                <entry>static</entry>
                                <entry>
<para>Global std::map process_map_collection store all transactional objects/pointers </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

                <para>Definition at line 75 of file TM.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>TM.h</para></listitem></itemizedlist></para>
            </simplesect>
            <simplesect>
                <title>pid_t TM::_tm_id</title>                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>_tm_id</entry>
                                <entry>
<para>pid_t, process id determine the actual process between process in the shared <link linkend="a00003">OSTM</link> library </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

                <para>Definition at line 95 of file TM.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>TM.h</para></listitem></itemizedlist></para>
            </simplesect>
            <section xml:id="a00004_1a9b5afb6b9d7c5925ab5cc5c65078ac23">
                <title>TM::TM ()=default</title> <emphasis>TM constructor, prevent from multiple instantiation.</emphasis>
                
            </section>
            <section xml:id="a00004_1a985f8cb24f685925ddd637c7030cd2b3">
                <title>TM::~TM ()=default</title> <emphasis>TM de-constructor, prevent from deletion.</emphasis>
                
            </section>
            <section xml:id="a00004_1a2d1de4a19f7ed6b2805ed6e955b8e45b">
                <title>TM::TM (const TM &amp;)=delete</title> <emphasis>TM copy constructor, prevent from copying the Transaction Manager.</emphasis>
                
            </section>
            <section xml:id="a00004_1a85a6b783f0566f0877bab6a7de977c0a">
                <title>TM&amp; TM::operator= (const TM &amp;)=delete</title> <emphasis>TM copy operator, prevent from copying the Transaction Manager.</emphasis>
                
            </section>
            <section xml:id="a00004_1afb8bc9f42fe06c52747beb7f4c46915c">
                <title>std::map&lt; std::thread::id, int &gt; TM::get_thread_Map ()</title> <emphasis>get_thread_Map returning and map to insert to the process_map_collection as an inner value</emphasis>
                
<para>get_thread_Map std::map, returning a map to store all unique ID from all objects from all transactions within the main process</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>thread_Map</entry>
                                <entry>
<para>std::map&lt; int, int &gt;, </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="a00004_1a26ea481c24d9aa3aebd6dafb7253376e">
                <title>void TM::registerTX ()</title> <emphasis>registerTX void, register transaction into txMap</emphasis>
                
<para>registerTX void, register a new <link linkend="a00005">TX</link> Transaction object into ythe txMap/Transaction Map to manage all the transactions within the shared library</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>txMap</entry>
                                <entry>
<para>std::map, collection to store all transaction created by the Transaction Manager </para>
</entry>
                            </row>
                            <row>
                                <entry>register_Lock</entry>
                                <entry>
<para>std::mutex, used by the lock_guard to protect shared map from race conditions </para>
</entry>
                            </row>
                            <row>
                                <entry>guard</entry>
                                <entry>
<para>std::lock_guard, locks the register_Lock mutex, unlock automatically when goes out of the scope </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="a00004_1a7ce5f35e0dae76df4fe116cf905bbe60">
                <title>TM &amp; TM::Instance ()</title> <emphasis>Scott Meyer&apos;s Singleton creation, what is thread safe.</emphasis>
                
<para>Instance <link linkend="a00004">TM</link>, return the same singleton object to any process.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>_instance</entry>
                                <entry>
<para><link linkend="a00004">TM</link>, static class reference to the instance of the Transaction Manager class </para>
</entry>
                            </row>
                            <row>
                                <entry>_instance</entry>
                                <entry>
<para>ppid, assigning the process id whoever created the Singleton instance </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="a00004_1a41cb0226cc4080c931651b13f74a0075">
                <title>std::shared_ptr&lt; TX &gt; const TM::_get_tx ()</title> <emphasis>_get_tx std::shared_ptr&lt;TX&gt;, returning a shared pointer with the transaction</emphasis>
                
<para>_get_tx std::shared_ptr&lt;TX&gt;, return a shared_ptr with the Transaction object, if <link linkend="a00005">TX</link> not exists then create one, else increasing the nesting level  std::mutex, protect shared collection from critical section</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>guard</entry>
                                <entry>
<para>std::lock_guard, locks the register_Lock mutex, unlock automatically when goes out of the scope </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="a00004_1a5e2d1127f2429f2f524d25f430eade06">
                <title>void TM::_TX_EXIT ()</title> <emphasis>_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process</emphasis>
                
<para>_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process  tx <link linkend="a00005">TX</link>, local object to function in transaction </para>

            </section>
            <section xml:id="a00004_1a1d6891b1d3e71cc0acef54e7afe71c09">
                <title>void TM::print_all ()</title> <emphasis>ONLY FOR TESTING print_all void, print out all object key from txMAP collection.</emphasis>
                
<para>ONLY FOR TESTING print_all void, prints all object in the txMap </para>

            </section>
</section>
