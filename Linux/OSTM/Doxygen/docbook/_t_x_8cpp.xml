<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_t_x_8cpp">
    <title>TX.cpp File Reference</title>
    <programlisting>#include &quot;TX.h&quot;</programlisting>
    <programlisting>#include &lt;iostream&gt;</programlisting>
<para>Include dependency diagram for TX.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="_t_x_8cpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for TX.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="_t_x_8cpp__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file TX.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">/*&#32;</emphasis>
2 <emphasis class="comment">&#32;*&#32;File:&#32;&#32;&#32;TX.cpp</emphasis>
3 <emphasis class="comment">&#32;*&#32;Author:&#32;Zoltan&#32;Fuzesi&#32;C00197361,&#32;</emphasis>
4 <emphasis class="comment">&#32;*&#32;IT&#32;Carlow,&#32;Software&#32;Engineering,&#32;</emphasis>
5 <emphasis class="comment">&#32;*</emphasis>
6 <emphasis class="comment">&#32;*&#32;Supervisor&#32;:&#32;Joe&#32;Kehoe,&#32;</emphasis>
7 <emphasis class="comment">&#32;*</emphasis>
8 <emphasis class="comment">&#32;*&#32;C++&#32;Software&#32;Transactional&#32;Memory,&#32;</emphasis>
9 <emphasis class="comment">&#32;*&#32;</emphasis>
10 <emphasis class="comment">&#32;*&#32;Created&#32;on&#32;December&#32;18,&#32;2017,&#32;2:09&#32;PM</emphasis>
11 <emphasis class="comment">&#32;*&#32;OSTM&#32;base&#32;class&#32;function&#32;declarations.</emphasis>
12 <emphasis class="comment">&#32;*/</emphasis>
13 
14 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="_t_x_8h">TX.h</link>&quot;</emphasis>
15 <emphasis class="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
16 <emphasis class="comment">/*</emphasis>
17 <emphasis class="comment">&#32;*&#32;@19&#32;main_Process_Map_collection,&#32;register&#32;static&#32;Global&#32;class&#32;level&#32;map&#32;to&#32;store&#32;all&#32;transactional&#32;objects/pointers</emphasis>
18 <emphasis class="comment">&#32;*/</emphasis>
19 std::map&lt;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>;
20 <emphasis class="comment">/*</emphasis>
21 <emphasis class="comment">&#32;*&#32;@23&#32;process_map_collection,&#32;register&#32;static&#32;Global&#32;class&#32;level&#32;map&#32;to&#32;store&#32;all&#32;transaction&#32;number&#32;associated&#32;with&#32;the&#32;main&#32;process</emphasis>
22 <emphasis class="comment">&#32;*/</emphasis>
23 std::map&lt;pid_t,&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;&gt;&#32;<link linkend="class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_1a2e3cd2f52fd93cf6ef3eb3c1cb830b9f">TX::process_map_collection</link>;
24 <emphasis class="comment">/*</emphasis>
25 <emphasis class="comment">&#32;*&#32;@27&#32;egister_Lock,&#32;register&#32;static&#32;class&#32;level&#32;shared&#32;std:mutex&#32;to&#32;protect&#32;shared&#32;map&#32;during&#32;transaction&#32;registration</emphasis>
26 <emphasis class="comment">&#32;*/</emphasis>
27 std::mutex&#32;<link linkend="class_t_x_aa688a8c96fa3cdf8cd92e267463536dc_1aa688a8c96fa3cdf8cd92e267463536dc">TX::register_Lock</link>;
28 <emphasis class="comment">/*</emphasis>
29 <emphasis class="comment">&#32;*&#32;@31&#32;test_counter,&#32;register&#32;class&#32;level&#32;Integer&#32;variable&#32;to&#32;store&#32;the&#32;umber&#32;of&#32;rollback&#32;happens,&#32;for&#32;testing&#32;purposes</emphasis>
30 <emphasis class="comment">&#32;*/</emphasis>
31 <emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_t_x_a25838234aab99ae891a90eb8623a8b3c_1a25838234aab99ae891a90eb8623a8b3c">TX::test_counter</link>&#32;=&#32;0;
<link linkend="class_t_x_a8a4b83eab0171ae834bfa92bbced1094_1a8a4b83eab0171ae834bfa92bbced1094">36 </link><link linkend="class_t_x_a8a4b83eab0171ae834bfa92bbced1094_1a8a4b83eab0171ae834bfa92bbced1094">TX::TX</link>(std::thread::id&#32;<emphasis class="keywordtype">id</emphasis>)&#32;{
38 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_t_x_a145a1c74b521f277fe481971a930b249_1a145a1c74b521f277fe481971a930b249">transaction_Number</link>&#32;=&#32;id;
40 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_1ae8f413fd7f4fea322e7ad3c668f9898e">_tx_nesting_level</link>&#32;=&#32;0;
41 }
<link linkend="class_t_x_abecf854cc3228ab6dd51175b3cd1c70a_1abecf854cc3228ab6dd51175b3cd1c70a">45 </link><link linkend="class_t_x_abecf854cc3228ab6dd51175b3cd1c70a_1abecf854cc3228ab6dd51175b3cd1c70a">TX::~TX</link>()&#32;{
47 }
<link linkend="class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_1ae045534c4a9d39bd5c6ea2a39a372a79">52 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_1ae045534c4a9d39bd5c6ea2a39a372a79">TX::th_exit</link>()&#32;{
54 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_1ae8f413fd7f4fea322e7ad3c668f9898e">_tx_nesting_level</link>&#32;&gt;&#32;0)&#32;{
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Active&#32;nested&#32;transactions&#32;running&#32;in&#32;background,&#32;do&#32;not&#32;delete&#32;anything&#32;yet&#32;*/</emphasis>
56 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Remove&#32;all&#32;elements&#32;map&#32;entries&#32;from&#32;transaction&#32;and&#32;clear&#32;the&#32;map&#32;*/</emphasis>
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.clear();
59 &#32;&#32;&#32;&#32;}
60 }
61 
<link linkend="class_t_x_aa9739c5c2077454c779098db7baefc2b_1aa9739c5c2077454c779098db7baefc2b">68 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_aa9739c5c2077454c779098db7baefc2b_1aa9739c5c2077454c779098db7baefc2b">TX::ostm_exit</link>()&#32;{
70 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::shared_ptr&lt;OSTM&gt;&gt;::iterator&#32;main_Process_Map_collection_Iterator;
72 &#32;&#32;&#32;&#32;pid_t&#32;ppid&#32;=&#32;getppid();
74 &#32;&#32;&#32;&#32;std::map&lt;pid_t,&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;&gt;::iterator&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_1a2e3cd2f52fd93cf6ef3eb3c1cb830b9f">TX::process_map_collection</link>.find(ppid);
76 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(process_map_collection_Iterator&#32;!=&#32;<link linkend="class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_1a2e3cd2f52fd93cf6ef3eb3c1cb830b9f">TX::process_map_collection</link>.end())&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keyword">auto</emphasis>&#32;current&#32;=&#32;process_map_collection_Iterator-&gt;second.begin();&#32;current&#32;!=&#32;process_map_collection_Iterator-&gt;second.end();&#32;++current)&#32;{
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find(current-&gt;first);
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(main_Process_Map_collection_Iterator&#32;!=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.end()){
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.erase(main_Process_Map_collection_Iterator-&gt;first);&#32;&#32;&#32;&#32;&#32;&#32;
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_1a2e3cd2f52fd93cf6ef3eb3c1cb830b9f">TX::process_map_collection</link>.erase(process_map_collection_Iterator-&gt;first);
89 &#32;&#32;&#32;&#32;}
90 }
91 
<link linkend="class_t_x_abc32af2f51df97ac483e5bfe7db6ca6e_1abc32af2f51df97ac483e5bfe7db6ca6e">96 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_abc32af2f51df97ac483e5bfe7db6ca6e_1abc32af2f51df97ac483e5bfe7db6ca6e">TX::_register</link>(std::shared_ptr&lt;OSTM&gt;&#32;<emphasis class="keywordtype">object</emphasis>)&#32;{
98 &#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;guard(<link linkend="class_t_x_aa688a8c96fa3cdf8cd92e267463536dc_1aa688a8c96fa3cdf8cd92e267463536dc">TX::register_Lock</link>);
100 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(<emphasis class="keywordtype">object</emphasis>&#32;==&#32;<emphasis class="keyword">nullptr</emphasis>){
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;NULL&#32;POINTER&#32;IN&#32;REGISTER&#32;FUNCTION]&quot;</emphasis>)&#32;);
102 &#32;&#32;&#32;&#32;}
104 &#32;&#32;&#32;&#32;pid_t&#32;ppid&#32;=&#32;getppid();
106 &#32;&#32;&#32;&#32;std::map&lt;pid_t,&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;&gt;::iterator&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_1a2e3cd2f52fd93cf6ef3eb3c1cb830b9f">TX::process_map_collection</link>.find(ppid);
108 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(process_map_collection_Iterator&#32;==&#32;<link linkend="class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_1a2e3cd2f52fd93cf6ef3eb3c1cb830b9f">TX::process_map_collection</link>.end())&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;map&#32;=&#32;&#32;<link linkend="class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_1a3f5671423cb7b9f9c98f8a25f2a4b545">get_thread_Map</link>();
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_1a2e3cd2f52fd93cf6ef3eb3c1cb830b9f">TX::process_map_collection</link>.insert({ppid,&#32;map});
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_1a2e3cd2f52fd93cf6ef3eb3c1cb830b9f">TX::process_map_collection</link>.find(ppid);
115 &#32;&#32;&#32;&#32;}
117 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::shared_ptr&lt;OSTM&gt;&gt;::iterator&#32;main_Process_Map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find(object-&gt;Get_Unique_ID());
119 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(main_Process_Map_collection_Iterator&#32;==&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.end())&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.insert({<emphasis class="keywordtype">object</emphasis>-&gt;Get_Unique_ID(),&#32;<emphasis class="keywordtype">object</emphasis>});
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process_map_collection_Iterator-&gt;second.insert({<emphasis class="keywordtype">object</emphasis>-&gt;Get_Unique_ID(),&#32;1});
124 &#32;&#32;&#32;&#32;}&#32;
126 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.find(object-&gt;Get_Unique_ID());
128 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;==&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end())&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.insert({<emphasis class="keywordtype">object</emphasis>-&gt;Get_Unique_ID(),&#32;<emphasis class="keywordtype">object</emphasis>-&gt;getBaseCopy(<emphasis class="keywordtype">object</emphasis>)});
131 &#32;&#32;&#32;&#32;}
132 }
<link linkend="class_t_x_a1d78262b8831ddd042ed491f2e600e24_1a1d78262b8831ddd042ed491f2e600e24">137 </link>std::shared_ptr&lt;OSTM&gt;&#32;<link linkend="class_t_x_a1d78262b8831ddd042ed491f2e600e24_1a1d78262b8831ddd042ed491f2e600e24">TX::load</link>(std::shared_ptr&lt;OSTM&gt;&#32;<emphasis class="keywordtype">object</emphasis>)&#32;{
139 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;working_Map_collection_Object_Shared_Pointer_Iterator;
141 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(<emphasis class="keywordtype">object</emphasis>&#32;==&#32;<emphasis class="keyword">nullptr</emphasis>){
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;NULL&#32;POINTER&#32;IN&#32;LOAD&#32;FUNCTION]&quot;</emphasis>)&#32;);
143 &#32;&#32;&#32;&#32;}
145 &#32;&#32;&#32;&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.find(object-&gt;Get_Unique_ID());
147 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end())&#32;{
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;getBaseCopy(working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second);
151 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;NO&#32;OBJECT&#32;FOUND&#32;LOAD&#32;FUNCTION]&quot;</emphasis>)&#32;);}
152 }
<link linkend="class_t_x_a7dbcb369aa4a3370b6c6829d278ece5d_1a7dbcb369aa4a3370b6c6829d278ece5d">157 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_a7dbcb369aa4a3370b6c6829d278ece5d_1a7dbcb369aa4a3370b6c6829d278ece5d">TX::store</link>(std::shared_ptr&lt;OSTM&gt;&#32;<emphasis class="keywordtype">object</emphasis>)&#32;{
159 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(<emphasis class="keywordtype">object</emphasis>&#32;==&#32;<emphasis class="keyword">nullptr</emphasis>){
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;NULL&#32;POINTER&#32;IN&#32;STORE&#32;FUNCTION]&quot;</emphasis>)&#32;);
161 &#32;&#32;&#32;&#32;}
163 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;working_Map_collection_Object_Shared_Pointer_Iterator;
165 &#32;&#32;&#32;&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.find(object-&gt;Get_Unique_ID());
167 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end())&#32;{
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second&#32;=&#32;object;
171 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;NO&#32;OBJECT&#32;FOUND&#32;STORE&#32;FUNCTION,&#32;CANNOT&#32;STORE&#32;OBJECT]&quot;</emphasis>)&#32;);}
172 }
<link linkend="class_t_x_a9dde5d356b35e557448e58d260087356_1a9dde5d356b35e557448e58d260087356">177 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_t_x_a9dde5d356b35e557448e58d260087356_1a9dde5d356b35e557448e58d260087356">TX::commit</link>()&#32;{
179 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;can_Commit&#32;=&#32;<emphasis class="keyword">true</emphasis>;
181 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_1ae8f413fd7f4fea322e7ad3c668f9898e">_tx_nesting_level</link>&#32;&gt;&#32;0)&#32;{
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_aa3ac499f576326588628ade96b27b4b1_1aa3ac499f576326588628ade96b27b4b1">_decrease_tx_nesting</link>();
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
185 &#32;&#32;&#32;&#32;}&#32;
187 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;working_Map_collection_Object_Shared_Pointer_Iterator;
189 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::shared_ptr&lt;OSTM&gt;&gt;::iterator&#32;main_Process_Map_collection_Iterator;
191 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.begin();&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end();&#32;working_Map_collection_Object_Shared_Pointer_Iterator++)&#32;{
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find(working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;Get_Unique_ID());
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(main_Process_Map_collection_Iterator&#32;==&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.end())
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;CAN&apos;T&#32;FIND&#32;OBJECT&#32;COMMIT&#32;FUNCTION]&quot;</emphasis>));
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
199 
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>(!(main_Process_Map_collection_Iterator-&gt;second)-&gt;is_Locked());
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(main_Process_Map_collection_Iterator-&gt;second-&gt;Get_Version()&#32;&gt;&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;Get_Version())&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;Set_Can_Commit(<emphasis class="keyword">false</emphasis>);
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;can_Commit&#32;=&#32;<emphasis class="keyword">false</emphasis>;
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">break</emphasis>;
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;Set_Can_Commit(<emphasis class="keyword">true</emphasis>);
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
213 &#32;&#32;&#32;&#32;}
215 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!can_Commit)&#32;{
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.begin();&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end();&#32;working_Map_collection_Object_Shared_Pointer_Iterator++)&#32;{
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator&#32;&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find(working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second-&gt;Get_Unique_ID());
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second)-&gt;copy(working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second,&#32;main_Process_Map_collection_Iterator-&gt;second);
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_1a4c13d2015dc15d0f788fa9a1413f0463">_release_object_lock</link>();
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">false</emphasis>;
227 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.begin();&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end();&#32;working_Map_collection_Object_Shared_Pointer_Iterator++)&#32;{
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find((working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second)-&gt;Get_Unique_ID());
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(main_Process_Map_collection_Iterator&#32;!=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.end())&#32;{
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(main_Process_Map_collection_Iterator-&gt;second)-&gt;copy(main_Process_Map_collection_Iterator-&gt;second,&#32;working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second);
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator-&gt;second-&gt;increase_VersionNumber();
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{&#32;<emphasis class="keywordflow">throw</emphasis>&#32;std::runtime_error(std::string(<emphasis class="stringliteral">&quot;[RUNTIME&#32;ERROR&#32;:&#32;CAN&apos;T&#32;FIND&#32;OBJECT&#32;COMMIT&#32;FUNCTION]&quot;</emphasis>));&#32;}
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_1a4c13d2015dc15d0f788fa9a1413f0463">_release_object_lock</link>();
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="class_t_x_ae045534c4a9d39bd5c6ea2a39a372a79_1ae045534c4a9d39bd5c6ea2a39a372a79">th_exit</link>();
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
247 &#32;&#32;&#32;&#32;}
248 }<emphasis class="comment">//Commit&#32;finish</emphasis>
249 
<link linkend="class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_1a4c13d2015dc15d0f788fa9a1413f0463">253 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_a4c13d2015dc15d0f788fa9a1413f0463_1a4c13d2015dc15d0f788fa9a1413f0463">TX::_release_object_lock</link>(){
255 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;working_Map_collection_Object_Shared_Pointer_Iterator;
257 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::shared_ptr&lt;OSTM&gt;&gt;::iterator&#32;main_Process_Map_collection_Iterator;
258 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(working_Map_collection_Object_Shared_Pointer_Iterator&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.begin();&#32;working_Map_collection_Object_Shared_Pointer_Iterator&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end();&#32;working_Map_collection_Object_Shared_Pointer_Iterator++)&#32;{
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main_Process_Map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.find((working_Map_collection_Object_Shared_Pointer_Iterator-&gt;second)-&gt;Get_Unique_ID());
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(main_Process_Map_collection_Iterator&#32;!=&#32;<link linkend="class_t_x_a1a45d726894190695314464d7cd97c29_1a1a45d726894190695314464d7cd97c29">TX::main_Process_Map_collection</link>.end())&#32;{
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(main_Process_Map_collection_Iterator)-&gt;second-&gt;unlock_Mutex();
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
267 }
268 
<link linkend="class_t_x_a1384bdf12d795854b5d32e7f61ffbdb8_1a1384bdf12d795854b5d32e7f61ffbdb8">272 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_a1384bdf12d795854b5d32e7f61ffbdb8_1a1384bdf12d795854b5d32e7f61ffbdb8">TX::_increase_tx_nesting</link>()&#32;{
274 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_1ae8f413fd7f4fea322e7ad3c668f9898e">_tx_nesting_level</link>&#32;+=&#32;1;
275 }
<link linkend="class_t_x_aa3ac499f576326588628ade96b27b4b1_1aa3ac499f576326588628ade96b27b4b1">279 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_aa3ac499f576326588628ade96b27b4b1_1aa3ac499f576326588628ade96b27b4b1">TX::_decrease_tx_nesting</link>()&#32;{
281 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_t_x_ae8f413fd7f4fea322e7ad3c668f9898e_1ae8f413fd7f4fea322e7ad3c668f9898e">_tx_nesting_level</link>&#32;-=&#32;1;
282 ;
283 }
<link linkend="class_t_x_ae9bf97930c4670f59d334b345353a71e_1ae9bf97930c4670f59d334b345353a71e">287 </link><emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_t_x_ae9bf97930c4670f59d334b345353a71e_1ae9bf97930c4670f59d334b345353a71e">TX::getTest_counter</link>()&#32;{
289 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_t_x_a25838234aab99ae891a90eb8623a8b3c_1a25838234aab99ae891a90eb8623a8b3c">TX::test_counter</link>;
290 }
<link linkend="class_t_x_a9eba04944d449285905b60ec47223cff_1a9eba04944d449285905b60ec47223cff">294 </link><emphasis class="keyword">const</emphasis>&#32;std::thread::id&#32;<link linkend="class_t_x_a9eba04944d449285905b60ec47223cff_1a9eba04944d449285905b60ec47223cff">TX::_get_tx_number</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
296 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_t_x_a145a1c74b521f277fe481971a930b249_1a145a1c74b521f277fe481971a930b249">transaction_Number</link>;
297 }
<link linkend="class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_1a3f5671423cb7b9f9c98f8a25f2a4b545">301 </link>std::map&lt;&#32;int,&#32;int&#32;&gt;&#32;<link linkend="class_t_x_a3f5671423cb7b9f9c98f8a25f2a4b545_1a3f5671423cb7b9f9c98f8a25f2a4b545">TX::get_thread_Map</link>()&#32;{
303 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;&#32;thread_Map;
305 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;thread_Map;
306 }
307 
<link linkend="class_t_x_a3d96ed91eb9ec73e16589f705661c5a7_1a3d96ed91eb9ec73e16589f705661c5a7">311 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_x_a3d96ed91eb9ec73e16589f705661c5a7_1a3d96ed91eb9ec73e16589f705661c5a7">TX::_print_all_tx</link>()&#32;{
313 &#32;&#32;&#32;&#32;std::map&lt;&#32;int,&#32;std::shared_ptr&lt;OSTM&gt;&#32;&gt;::iterator&#32;it;
315 &#32;&#32;&#32;&#32;pid_t&#32;ppid&#32;=&#32;getppid();
317 &#32;&#32;&#32;&#32;std::map&lt;pid_t,&#32;std::map&lt;&#32;int,&#32;int&#32;&gt;&gt;::iterator&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_1a2e3cd2f52fd93cf6ef3eb3c1cb830b9f">TX::process_map_collection</link>.find(ppid);
319 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(process_map_collection_Iterator&#32;!=&#32;<link linkend="class_t_x_a2e3cd2f52fd93cf6ef3eb3c1cb830b9f_1a2e3cd2f52fd93cf6ef3eb3c1cb830b9f">TX::process_map_collection</link>.end())&#32;{
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keyword">auto</emphasis>&#32;current&#32;=&#32;process_map_collection_Iterator-&gt;second.begin();&#32;current&#32;!=&#32;process_map_collection_Iterator-&gt;second.end();&#32;++current)&#32;{
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.find(current-&gt;first);
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(it&#32;!=&#32;<link linkend="class_t_x_a81aafda16e2f20e36ec6c68e584668ff_1a81aafda16e2f20e36ec6c68e584668ff">working_Map_collection</link>.end()){
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;[Unique&#32;number&#32;]&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;it-&gt;second-&gt;Get_Unique_ID()&#32;&lt;&lt;&#32;std::endl;
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
330 &#32;&#32;&#32;&#32;}
331 }
    </computeroutput></literallayout>
</section>
