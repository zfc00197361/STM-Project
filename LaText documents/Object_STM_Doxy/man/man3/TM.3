.TH "TM" 3 "Sun Apr 1 2018" "Version v 0.0.1" "C++ Software Transactional Memory" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TM \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TM\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::shared_ptr< \fBTX\fP > const \fB_get_tx\fP ()"
.br
.RI "\fI_get_tx std::shared_ptr<TX>, returning a shared pointer with the transaction \fP"
.ti -1c
.RI "void \fB_TX_EXIT\fP ()"
.br
.RI "\fI_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process \fP"
.ti -1c
.RI "void \fBprint_all\fP ()"
.br
.RI "\fIONLY FOR TESTING print_all void, print out all object key from txMAP collection\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBTM\fP & \fBInstance\fP ()"
.br
.RI "\fIScott Meyer's Singleton creation, what is thread safe\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 58 of file TM\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "std::shared_ptr< \fBTX\fP > const TM::_get_tx ()"

.PP
_get_tx std::shared_ptr<TX>, returning a shared pointer with the transaction _get_tx std::shared_ptr<TX>, return a shared_ptr with the Transaction object, if \fBTX\fP not exists then create one, else increasing the nesting level  std::mutex, protect shared collection from critical section
.PP
\fBParameters:\fP
.RS 4
\fIguard\fP std::lock_guard, locks the register_Lock mutex, unlock automatically when goes out of the scope 
.RE
.PP

.PP
Definition at line 78 of file TM\&.cpp\&.
.SS "void TM::_TX_EXIT ()"

.PP
_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process _TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process  tx \fBTX\fP, local object to function in transaction 
.PP
Definition at line 101 of file TM\&.cpp\&.
.SS "\fBTM\fP & TM::Instance ()\fC [static]\fP"

.PP
Scott Meyer's Singleton creation, what is thread safe\&. Instance \fBTM\fP, return the same singleton object to any process\&.
.PP
\fBParameters:\fP
.RS 4
\fI_instance\fP \fBTM\fP, static class reference to the instance of the Transaction Manager class 
.br
\fI_instance\fP ppid, assigning the process id whoever created the Singleton instance 
.RE
.PP

.PP
Definition at line 28 of file TM\&.cpp\&.
.SS "void TM::print_all ()"

.PP
ONLY FOR TESTING print_all void, print out all object key from txMAP collection\&. ONLY FOR TESTING print_all void, prints all object in the txMap 
.PP
Definition at line 121 of file TM\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for C++ Software Transactional Memory from the source code\&.
