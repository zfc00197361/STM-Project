<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_t_m" kind="class" language="C++" prot="public">
    <compoundname>TM</compoundname>
    <includes refid="_t_m_8h" local="no">TM.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_t_m_1a0333dfa193ea99d7626de74a2b932e9b" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::thread::id, std::shared_ptr&lt; <ref refid="class_t_x" kindref="compound">TX</ref> &gt; &gt;</type>
        <definition>std::map&lt;std::thread::id, std::shared_ptr&lt;TX&gt; &gt; TM::txMap</definition>
        <argsstring></argsstring>
        <name>txMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txMap</parametername>
</parameternamelist>
<parameterdescription>
<para>std::map, store all transactional objects created with Transaction Manager </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="79" column="1" bodyfile="TM.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_t_m_1aeb26546681bfe64e21606b8c012bb8c3" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex TM::register_Lock</definition>
        <argsstring></argsstring>
        <name>register_Lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>register_Lock</parametername>
</parameternamelist>
<parameterdescription>
<para>std::mutex, used in the registerTX function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="96" column="1" bodyfile="TM.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_t_m_1a123bc5aa0766a7b909bebc54a429e5b0" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex TM::get_Lock</definition>
        <argsstring></argsstring>
        <name>get_Lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>register_Lock</parametername>
</parameternamelist>
<parameterdescription>
<para>std::mutex, used in the _get_tx function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="100" column="1" bodyfile="TM.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_t_m_1a81c3bd28ad2343a620fa070f8ac186ca" prot="private" static="yes" mutable="no">
        <type>std::map&lt; int, std::map&lt; std::thread::id, int &gt; &gt;</type>
        <definition>std::map&lt; int, std::map&lt; std::thread::id, int &gt; &gt; TM::process_map_collection</definition>
        <argsstring></argsstring>
        <name>process_map_collection</name>
        <briefdescription>
<para>STATIC GLOBAL MAP Collection to store all process associated keys to find when deleting transactions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>process_map_collection</parametername>
</parameternamelist>
<parameterdescription>
<para>std::map</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>static</parametername>
</parameternamelist>
<parameterdescription>
<para>Global std::map process_map_collection store all transactional objects/pointers </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="84" column="1" bodyfile="TM.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_t_m_1a6fb90615393f9205838e302c714bbd60" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int TM::_tm_id</definition>
        <argsstring></argsstring>
        <name>_tm_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_tm_id</parametername>
</parameternamelist>
<parameterdescription>
<para>pid_t, process id determine the actual process between process in the shared <ref refid="class_o_s_t_m" kindref="compound">OSTM</ref> library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="104" column="1" bodyfile="TM.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_t_m_1a9b5afb6b9d7c5925ab5cc5c65078ac23" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TM::TM</definition>
        <argsstring>()=default</argsstring>
        <name>TM</name>
        <briefdescription>
<para><ref refid="class_t_m" kindref="compound">TM</ref> constructor, prevent from multiple instantiation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_t_m_1a985f8cb24f685925ddd637c7030cd2b3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TM::~TM</definition>
        <argsstring>()=default</argsstring>
        <name>~TM</name>
        <briefdescription>
<para><ref refid="class_t_m" kindref="compound">TM</ref> de-constructor, prevent from deletion. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_t_m_1a2d1de4a19f7ed6b2805ed6e955b8e45b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TM::TM</definition>
        <argsstring>(const TM &amp;)=delete</argsstring>
        <name>TM</name>
        <param>
          <type>const <ref refid="class_t_m" kindref="compound">TM</ref> &amp;</type>
        </param>
        <briefdescription>
<para><ref refid="class_t_m" kindref="compound">TM</ref> copy constructor, prevent from copying the Transaction Manager. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_t_m_1a85a6b783f0566f0877bab6a7de977c0a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_t_m" kindref="compound">TM</ref> &amp;</type>
        <definition>TM&amp; TM::operator=</definition>
        <argsstring>(const TM &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_t_m" kindref="compound">TM</ref> &amp;</type>
        </param>
        <briefdescription>
<para><ref refid="class_t_m" kindref="compound">TM</ref> copy operator, prevent from copying the Transaction Manager. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_t_m_1afb8bc9f42fe06c52747beb7f4c46915c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::thread::id, int &gt;</type>
        <definition>std::map&lt; std::thread::id, int &gt; TM::get_thread_Map</definition>
        <argsstring>()</argsstring>
        <name>get_thread_Map</name>
        <briefdescription>
<para>get_thread_Map returning and map to insert to the process_map_collection as an inner value </para>        </briefdescription>
        <detaileddescription>
<para>get_thread_Map std::map, returning a map to store all unique ID from all objects from all transactions within the main process</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_Map</parametername>
</parameternamelist>
<parameterdescription>
<para>std::map&lt; int, int &gt;, </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="88" column="1" bodyfile="TM.cpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_t_m_1a26ea481c24d9aa3aebd6dafb7253376e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TM::registerTX</definition>
        <argsstring>()</argsstring>
        <name>registerTX</name>
        <briefdescription>
<para>registerTX void, register transaction into txMap </para>        </briefdescription>
        <detaileddescription>
<para>registerTX void, register a new <ref refid="class_t_x" kindref="compound">TX</ref> Transaction object into ythe txMap/Transaction Map to manage all the transactions within the shared library</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txMap</parametername>
</parameternamelist>
<parameterdescription>
<para>std::map, collection to store all transaction created by the Transaction Manager </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>register_Lock</parametername>
</parameternamelist>
<parameterdescription>
<para>std::mutex, used by the lock_guard to protect shared map from race conditions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guard</parametername>
</parameternamelist>
<parameterdescription>
<para>std::lock_guard, locks the register_Lock mutex, unlock automatically when goes out of the scope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="92" column="1" bodyfile="TM.cpp" bodystart="43" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_t_m_1a7ce5f35e0dae76df4fe116cf905bbe60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_t_m" kindref="compound">TM</ref> &amp;</type>
        <definition>TM &amp; TM::Instance</definition>
        <argsstring>()</argsstring>
        <name>Instance</name>
        <briefdescription>
<para>Scott Meyer&apos;s Singleton creation, what is thread safe. </para>        </briefdescription>
        <detaileddescription>
<para>Instance <ref refid="class_t_m" kindref="compound">TM</ref>, return the same singleton object to any process.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_instance</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_t_m" kindref="compound">TM</ref>, static class reference to the instance of the Transaction Manager class </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>ppid, assigning the process id whoever created the Singleton instance </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="112" column="1" bodyfile="TM.cpp" bodystart="28" bodyend="33"/>
        <referencedby refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="main_8cpp" startline="649" endline="1024">main</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_t_m_1a41cb0226cc4080c931651b13f74a0075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="class_t_x" kindref="compound">TX</ref> &gt; const</type>
        <definition>std::shared_ptr&lt; TX &gt; const TM::_get_tx</definition>
        <argsstring>()</argsstring>
        <name>_get_tx</name>
        <briefdescription>
<para>_get_tx std::shared_ptr&lt;TX&gt;, returning a shared pointer with the transaction </para>        </briefdescription>
        <detaileddescription>
<para>_get_tx std::shared_ptr&lt;TX&gt;, return a shared_ptr with the Transaction object, if <ref refid="class_t_x" kindref="compound">TX</ref> not exists then create one, else increasing the nesting level  std::mutex, protect shared collection from critical section</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guard</parametername>
</parameternamelist>
<parameterdescription>
<para>std::lock_guard, locks the register_Lock mutex, unlock automatically when goes out of the scope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="116" column="1" bodyfile="TM.cpp" bodystart="78" bodyend="96"/>
        <referencedby refid="main_8cpp_1a944b67b9489cc68c8eac66d42f4515ec" compoundref="main_8cpp" startline="51" endline="115">_six_account_transfer_</referencedby>
        <referencedby refid="main_8cpp_1a83aef8c5b69afef4e38d14c17fe782b3" compoundref="main_8cpp" startline="123" endline="197">_two_account_transfer_</referencedby>
        <referencedby refid="main_8cpp_1a5675cb594d74aa1bf5e80233370ffd81" compoundref="main_8cpp" startline="206" endline="285">_nesting_</referencedby>
        <referencedby refid="main_8cpp_1a0099d241c74532abfb1baae50a52da52" compoundref="main_8cpp" startline="294" endline="350">_complex_transfer_</referencedby>
        <referencedby refid="main_8cpp_1a1c170f18aac9dbb8aba1ad2f7e4619cc" compoundref="main_8cpp" startline="358" endline="411">_warehouse_transfer_</referencedby>
        <referencedby refid="main_8cpp_1a52fcb0d50c67be8cd20f2aca338683c7" compoundref="main_8cpp" startline="419" endline="516">_nested_warehouse_transfer_</referencedby>
        <referencedby refid="main_8cpp_1a12500f2bcc3c3bb8ad7dd9d74c1637d1" compoundref="main_8cpp" startline="518" endline="644">_complex_warehouse_transfer_</referencedby>
        <referencedby refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="main_8cpp" startline="649" endline="1024">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_t_m_1a5e2d1127f2429f2f524d25f430eade06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TM::_TX_EXIT</definition>
        <argsstring>()</argsstring>
        <name>_TX_EXIT</name>
        <briefdescription>
<para>_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process </para>        </briefdescription>
        <detaileddescription>
<para>_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process  tx <ref refid="class_t_x" kindref="compound">TX</ref>, local object to function in transaction </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="120" column="1" bodyfile="TM.cpp" bodystart="101" bodyend="117"/>
        <references refid="class_t_x_1aa9739c5c2077454c779098db7baefc2b" compoundref="_t_x_8cpp" startline="72" endline="94">TX::ostm_exit</references>
        <referencedby refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="main_8cpp" startline="649" endline="1024">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_t_m_1a1d6891b1d3e71cc0acef54e7afe71c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TM::print_all</definition>
        <argsstring>()</argsstring>
        <name>print_all</name>
        <briefdescription>
<para>ONLY FOR TESTING print_all void, print out all object key from txMAP collection. </para>        </briefdescription>
        <detaileddescription>
<para>ONLY FOR TESTING print_all void, prints all object in the txMap </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TM.h" line="124" column="1" bodyfile="TM.cpp" bodystart="121" bodyend="127"/>
        <referencedby refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="main_8cpp" startline="649" endline="1024">main</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="TM.h" line="58" column="1" bodyfile="TM.h" bodystart="58" bodyend="127"/>
    <listofallmembers>
      <member refid="class_t_m_1a41cb0226cc4080c931651b13f74a0075" prot="public" virt="non-virtual"><scope>TM</scope><name>_get_tx</name></member>
      <member refid="class_t_m_1a6fb90615393f9205838e302c714bbd60" prot="private" virt="non-virtual"><scope>TM</scope><name>_tm_id</name></member>
      <member refid="class_t_m_1a5e2d1127f2429f2f524d25f430eade06" prot="public" virt="non-virtual"><scope>TM</scope><name>_TX_EXIT</name></member>
      <member refid="class_t_m_1a123bc5aa0766a7b909bebc54a429e5b0" prot="private" virt="non-virtual"><scope>TM</scope><name>get_Lock</name></member>
      <member refid="class_t_m_1afb8bc9f42fe06c52747beb7f4c46915c" prot="private" virt="non-virtual"><scope>TM</scope><name>get_thread_Map</name></member>
      <member refid="class_t_m_1a7ce5f35e0dae76df4fe116cf905bbe60" prot="public" virt="non-virtual"><scope>TM</scope><name>Instance</name></member>
      <member refid="class_t_m_1a85a6b783f0566f0877bab6a7de977c0a" prot="private" virt="non-virtual"><scope>TM</scope><name>operator=</name></member>
      <member refid="class_t_m_1a1d6891b1d3e71cc0acef54e7afe71c09" prot="public" virt="non-virtual"><scope>TM</scope><name>print_all</name></member>
      <member refid="class_t_m_1a81c3bd28ad2343a620fa070f8ac186ca" prot="private" virt="non-virtual"><scope>TM</scope><name>process_map_collection</name></member>
      <member refid="class_t_m_1aeb26546681bfe64e21606b8c012bb8c3" prot="private" virt="non-virtual"><scope>TM</scope><name>register_Lock</name></member>
      <member refid="class_t_m_1a26ea481c24d9aa3aebd6dafb7253376e" prot="private" virt="non-virtual"><scope>TM</scope><name>registerTX</name></member>
      <member refid="class_t_m_1a9b5afb6b9d7c5925ab5cc5c65078ac23" prot="private" virt="non-virtual"><scope>TM</scope><name>TM</name></member>
      <member refid="class_t_m_1a2d1de4a19f7ed6b2805ed6e955b8e45b" prot="private" virt="non-virtual"><scope>TM</scope><name>TM</name></member>
      <member refid="class_t_m_1a0333dfa193ea99d7626de74a2b932e9b" prot="private" virt="non-virtual"><scope>TM</scope><name>txMap</name></member>
      <member refid="class_t_m_1a985f8cb24f685925ddd637c7030cd2b3" prot="private" virt="non-virtual"><scope>TM</scope><name>~TM</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
