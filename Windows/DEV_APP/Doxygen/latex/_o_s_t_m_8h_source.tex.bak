\hypertarget{_o_s_t_m_8h_source}{}\subsection{O\+S\+T\+M.\+h}

\begin{DoxyCode}
00001 \textcolor{comment}{/* }
00002 \textcolor{comment}{ * File:   OSTM.h}
00003 \textcolor{comment}{ * Author: Zoltan FUzesi}
00004 \textcolor{comment}{ *}
00005 \textcolor{comment}{ * Created on December 18, 2017, 2:09 PM}
00006 \textcolor{comment}{ * OSTM header file fields and  methods declarations}
00007 \textcolor{comment}{ */}
00008 
00009 \textcolor{preprocessor}{#ifndef OSTM\_H}
00010 \textcolor{preprocessor}{#define OSTM\_H}
00011 \textcolor{preprocessor}{#include <mutex>}
00012 \textcolor{preprocessor}{#include <memory>}
00013 \textcolor{preprocessor}{#include <string>}
00014 \textcolor{preprocessor}{#include <iostream>}
00015 \textcolor{preprocessor}{#include <string>}
00016 
\hypertarget{_o_s_t_m_8h_source.tex_l00017}{}\hyperlink{_o_s_t_m_8h_a61cad1646e9e1404902319b20294e99d}{00017} \textcolor{keyword}{class }\textcolor{keyword}{\_\_declspec(dllexport)} OSTM \{
00018 \textcolor{keyword}{public}:
00022     OSTM();
00026     OSTM(\textcolor{keywordtype}{int} \_version\_number\_, \textcolor{keywordtype}{int} \_unique\_id\_);
00030     \textcolor{keyword}{virtual} ~OSTM();
00034     \textcolor{keyword}{virtual} \textcolor{keywordtype}{void} copy(std::shared\_ptr<OSTM> from, std::shared\_ptr<OSTM> to)\{\};
00038     \textcolor{keyword}{virtual} std::shared\_ptr<OSTM> getBaseCopy(std::shared\_ptr<OSTM> \textcolor{keywordtype}{object}) = 0;\textcolor{comment}{//std::cout << "[OSTM
       GETBASECOPY]" << std::endl;\};}
00042 \textcolor{comment}{}    \textcolor{keyword}{virtual} \textcolor{keywordtype}{void} toString()\{\};
00046     \textcolor{keywordtype}{void} Set\_Unique\_ID(\textcolor{keywordtype}{int} uniqueID);
00050     \textcolor{keywordtype}{int} Get\_Unique\_ID() \textcolor{keyword}{const};
00054     \textcolor{keywordtype}{void} Set\_Version(\textcolor{keywordtype}{int} version);
00058     \textcolor{keywordtype}{int} Get\_Version() \textcolor{keyword}{const};
00062     \textcolor{keywordtype}{void} increase\_VersionNumber();
00066     \textcolor{keywordtype}{bool} Is\_Can\_Commit() \textcolor{keyword}{const};
00070     \textcolor{keywordtype}{void} Set\_Can\_Commit(\textcolor{keywordtype}{bool} canCommit);
00074     \textcolor{keywordtype}{void} Set\_Abort\_Transaction(\textcolor{keywordtype}{bool} abortTransaction);
00078     \textcolor{keywordtype}{bool} Is\_Abort\_Transaction() \textcolor{keyword}{const};
00082     \textcolor{keywordtype}{void} lock\_Mutex();
00086     \textcolor{keywordtype}{void} unlock\_Mutex();
00090     \textcolor{keywordtype}{bool} is\_Locked();
00091 
00092 \textcolor{keyword}{private}:
00093     \textcolor{comment}{/*}
00094 \textcolor{comment}{     * \(\backslash\)brief Object version number}
00095 \textcolor{comment}{     */}
00096     \textcolor{keywordtype}{int} version;
00097     \textcolor{comment}{/*}
00098 \textcolor{comment}{     * \(\backslash\)brief Object unique identifier}
00099 \textcolor{comment}{     */}
00100     \textcolor{keywordtype}{int} uniqueID;
00101     \textcolor{comment}{/*}
00102 \textcolor{comment}{     * \(\backslash\)brief Boolean value to check any other thread failed to commit}
00103 \textcolor{comment}{     */}
00104     \textcolor{keywordtype}{bool} canCommit;
00105     \textcolor{comment}{/*}
00106 \textcolor{comment}{     * \(\backslash\)brief Abort the transaction}
00107 \textcolor{comment}{     */}
00108     \textcolor{keywordtype}{bool} abort\_Transaction;
00112     \textcolor{keyword}{static} \textcolor{keywordtype}{int} global\_Unique\_ID\_Number;
00116     \textcolor{keyword}{const} \textcolor{keywordtype}{int} ZERO = 0;
00120     std::mutex mutex;
00124     \textcolor{keywordtype}{int} Get\_global\_Unique\_ID\_Number();
00125 
00126 \};
00127 
00128 \textcolor{preprocessor}{#endif }\textcolor{comment}{/* OSTM\_H */}\textcolor{preprocessor}{}
\end{DoxyCode}
