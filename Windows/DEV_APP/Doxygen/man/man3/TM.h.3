.TH "TM.h" 3 "Wed Mar 7 2018" "C++ Software Transactional memory" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TM.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <thread>\fP
.br
\fC#include <process\&.h>\fP
.br
\fC#include <mutex>\fP
.br
\fC#include <unordered_map>\fP
.br
\fC#include <utility>\fP
.br
\fC#include <map>\fP
.br
\fC#include 'TX\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "class \fB__declspec\fP (dllexport) TM"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "class __declspec (dllexport)"
TM constructor, prevent from multiple instantiation
.PP
TM de-constructor, prevent from deletion
.PP
TM copy constructor, prevent from copying the Transaction Manager
.PP
TM copy operator, prevent from copying the Transaction Manager
.PP
\fBParameters:\fP
.RS 4
\fItxMap\fP std::map, store all transactional objects created with Transaction Manager
.RE
.PP
STATIC GLOBAL MAP Collection to store all process associated keys to find when deleting transactions 
.PP
\fBParameters:\fP
.RS 4
\fIprocess_map_collection\fP std::map
.RE
.PP
get_thread_Map returning and map to insert to the process_map_collection as an inner value
.PP
registerTX void, register transaction into txMap
.PP
\fBParameters:\fP
.RS 4
\fIregister_Lock\fP std::mutex, used in the registerTX function
.br
\fIregister_Lock\fP std::mutex, used in the _get_tx function
.br
\fI_tm_id\fP pid_t, process id determine the actual process between process in the shared OSTM library
.RE
.PP
Scott Meyer's Singleton creation, what is thread safe
.PP
_get_tx std::shared_ptr<TX>, returning a shared pointer with the transaction
.PP
_TX_EXIT void, the thread calls the ostm_exit function in the transaction, and clear all elements from the shared global collection associated with the main process
.PP
ONLY FOR TESTING print_all void, prints all object in the txMap
.PP
Definition at line 48 of file TM\&.h\&.
.PP
.nf
48                                {
49 private:
53     TM() = default;
57     ~TM() = default;
61     TM(const TM&) = delete;
65     TM& operator=(const TM&) = delete;
69     std::map<std::thread::id, std::shared_ptr<TX>>txMap;
74     static std::map<int, std::map< std::thread::id, int >> process_map_collection;
78     std::map< std::thread::id, int > get_thread_Map();
82     void registerTX();
86     std::mutex register_Lock;
90     std::mutex get_Lock;
94     static int _tm_id;
95     
96 public:
97 
101     static TM& Instance();
105     std::shared_ptr<TX>const _get_tx();
109     void _TX_EXIT();
113     void print_all();
114     
115 
116 };
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for C++ Software Transactional memory from the source code\&.
