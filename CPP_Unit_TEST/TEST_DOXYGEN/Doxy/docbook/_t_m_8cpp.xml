<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_t_m_8cpp">
    <title>TM.cpp File Reference</title>
    <programlisting>#include &quot;TM.h&quot;</programlisting>
    <programlisting>#include &lt;thread&gt;</programlisting>
    <programlisting>#include &lt;unistd.h&gt;</programlisting>
    <programlisting>#include &lt;sys/types.h&gt;</programlisting>
    <programlisting>#include &lt;iostream&gt;</programlisting>
<para>Include dependency diagram for TM.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="_t_m_8cpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for TM.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="_t_m_8cpp__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file TM.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">/*&#32;</emphasis>
2 <emphasis class="comment">&#32;*&#32;File:&#32;&#32;&#32;TM.cpp</emphasis>
3 <emphasis class="comment">&#32;*&#32;Author:&#32;Zoltan&#32;Fuzesi</emphasis>
4 <emphasis class="comment">&#32;*&#32;</emphasis>
5 <emphasis class="comment">&#32;*&#32;Created&#32;on&#32;December&#32;18,&#32;2017,&#32;2:09&#32;PM</emphasis>
6 <emphasis class="comment">&#32;*&#32;Transaction&#32;Manager&#32;class&#32;methods&#32;implementation</emphasis>
7 <emphasis class="comment">&#32;*/</emphasis>
8 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="_t_m_8h">TM.h</link>&quot;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&lt;thread&gt;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&lt;unistd.h&gt;</emphasis>
11 <emphasis class="comment">//#include&#32;&lt;process.h&gt;</emphasis>
12 <emphasis class="preprocessor">#include&#32;&lt;sys/types.h&gt;</emphasis>
13 <emphasis class="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
14 
18 <emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_t_m_a6fb90615393f9205838e302c714bbd60_1a6fb90615393f9205838e302c714bbd60">TM::_tm_id</link>;
22 std::map&lt;int,&#32;std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;&gt;&#32;<link linkend="class_t_m_a81c3bd28ad2343a620fa070f8ac186ca_1a81c3bd28ad2343a620fa070f8ac186ca">TM::process_map_collection</link>;
<link linkend="class_t_m_a7ce5f35e0dae76df4fe116cf905bbe60_1a7ce5f35e0dae76df4fe116cf905bbe60">28 </link><link linkend="class_t_m">TM</link>&amp;&#32;<link linkend="class_t_m_a7ce5f35e0dae76df4fe116cf905bbe60_1a7ce5f35e0dae76df4fe116cf905bbe60">TM::Instance</link>()&#32;{
29 &#32;&#32;&#32;&#32;<emphasis class="keyword">static</emphasis>&#32;<link linkend="class_t_m">TM</link>&#32;_instance;
30 &#32;&#32;&#32;&#32;_instance.<link linkend="class_t_m_a6fb90615393f9205838e302c714bbd60_1a6fb90615393f9205838e302c714bbd60">_tm_id</link>&#32;=&#32;getpid();
31 
32 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;_instance;
33 }
34 
35 <emphasis class="comment">//TM&#32;Transaction&#32;managger&#32;checking&#32;the&#32;Process&#32;ID&#32;existence&#32;in&#32;the&#32;map</emphasis>
36 <emphasis class="comment">//If&#32;not&#32;in&#32;the&#32;map&#32;then&#32;register</emphasis>
<link linkend="class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_1a26ea481c24d9aa3aebd6dafb7253376e">43 </link><emphasis class="comment"></emphasis><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_1a26ea481c24d9aa3aebd6dafb7253376e">TM::registerTX</link>()
44 {
45 &#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;guard(<link linkend="class_t_m_aeb26546681bfe64e21606b8c012bb8c3_1aeb26546681bfe64e21606b8c012bb8c3">register_Lock</link>);
46 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ppid&#32;=&#32;getpid();
47 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;&gt;::iterator&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_m_a81c3bd28ad2343a620fa070f8ac186ca_1a81c3bd28ad2343a620fa070f8ac186ca">TM::process_map_collection</link>.find(ppid);
48 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(process_map_collection_Iterator&#32;==&#32;<link linkend="class_t_m_a81c3bd28ad2343a620fa070f8ac186ca_1a81c3bd28ad2343a620fa070f8ac186ca">TM::process_map_collection</link>.end())&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
50 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Register&#32;main&#32;process/application&#32;to&#32;the&#32;global&#32;map</emphasis>
51 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;map&#32;=&#32;<link linkend="class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_1afb8bc9f42fe06c52747beb7f4c46915c">get_thread_Map</link>();
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_m_a81c3bd28ad2343a620fa070f8ac186ca_1a81c3bd28ad2343a620fa070f8ac186ca">TM::process_map_collection</link>.insert({ppid,&#32;map});
54 
55 &#32;&#32;&#32;&#32;}
56 &#32;&#32;&#32;&#32;std::map&lt;std::thread::id,&#32;std::shared_ptr&#32;&lt;&#32;TX&gt;&gt;::iterator&#32;it&#32;=&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.find(std::this_thread::get_id());
57 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(it&#32;==&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.end())&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;TX&gt;&#32;_transaction_object(<emphasis class="keyword">new</emphasis>&#32;<link linkend="class_t_x">TX</link>(std::this_thread::get_id()));
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.insert({std::this_thread::get_id(),&#32;_transaction_object});
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
61 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Get&#32;the&#32;map&#32;if&#32;registered&#32;first&#32;time</emphasis>
62 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_m_a81c3bd28ad2343a620fa070f8ac186ca_1a81c3bd28ad2343a620fa070f8ac186ca">TM::process_map_collection</link>.find(ppid);
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
65 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Insert&#32;to&#32;the&#32;GLOBAL&#32;MAP&#32;as&#32;a&#32;helper&#32;to&#32;clean&#32;up&#32;at&#32;end&#32;of&#32;main&#32;process&#32;</emphasis>
66 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process_map_collection_Iterator-&gt;second.insert({std::this_thread::get_id(),&#32;1});
68 
69 &#32;&#32;&#32;&#32;}
70 
71 }
72 
73 
<link linkend="class_t_m_a41cb0226cc4080c931651b13f74a0075_1a41cb0226cc4080c931651b13f74a0075">79 </link>std::shared_ptr&lt;TX&gt;<emphasis class="keyword">const</emphasis>&#32;<link linkend="class_t_m_a41cb0226cc4080c931651b13f74a0075_1a41cb0226cc4080c931651b13f74a0075">TM::_get_tx</link>()
80 {
81 &#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;guard(<link linkend="class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_1a123bc5aa0766a7b909bebc54a429e5b0">get_Lock</link>);
82 
83 &#32;&#32;&#32;&#32;std::map&lt;std::thread::id,&#32;std::shared_ptr&lt;TX&gt;&gt;::iterator&#32;it&#32;=&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.find(std::this_thread::get_id());
84 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(it&#32;==&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.end())
85 &#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_m_a26ea481c24d9aa3aebd6dafb7253376e_1a26ea481c24d9aa3aebd6dafb7253376e">registerTX</link>();
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.find(std::this_thread::get_id());
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;
89 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it-&gt;second-&gt;_increase_tx_nesting();
91 &#32;&#32;&#32;&#32;}
92 &#32;&#32;&#32;&#32;<emphasis class="comment">//it&#32;=&#32;txMap.find(std::this_thread::get_id());</emphasis>
93 &#32;&#32;&#32;&#32;
94 
95 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;it-&gt;second;
96 
97 }
<link linkend="class_t_m_a5e2d1127f2429f2f524d25f430eade06_1a5e2d1127f2429f2f524d25f430eade06">102 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_m_a5e2d1127f2429f2f524d25f430eade06_1a5e2d1127f2429f2f524d25f430eade06">TM::_TX_EXIT</link>(){
103 &#32;&#32;&#32;&#32;<link linkend="class_t_x">TX</link>&#32;tx(std::this_thread::get_id());
104 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ppid&#32;=&#32;getpid();
105 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;&gt;::iterator&#32;process_map_collection_Iterator&#32;=&#32;<link linkend="class_t_m_a81c3bd28ad2343a620fa070f8ac186ca_1a81c3bd28ad2343a620fa070f8ac186ca">TM::process_map_collection</link>.find(ppid);
106 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(process_map_collection_Iterator&#32;!=&#32;<link linkend="class_t_m_a81c3bd28ad2343a620fa070f8ac186ca_1a81c3bd28ad2343a620fa070f8ac186ca">TM::process_map_collection</link>.end())&#32;{
107 
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keyword">auto</emphasis>&#32;current&#32;=&#32;process_map_collection_Iterator-&gt;second.begin();&#32;current&#32;!=&#32;process_map_collection_Iterator-&gt;second.end();&#32;++current)&#32;{
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
110 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Delete&#32;all&#32;transaction&#32;associated&#32;with&#32;the&#32;actual&#32;main&#32;process</emphasis>
111 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.erase(current-&gt;first);
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_t_m_a81c3bd28ad2343a620fa070f8ac186ca_1a81c3bd28ad2343a620fa070f8ac186ca">TM::process_map_collection</link>.erase(ppid);
115 
116 &#32;&#32;&#32;&#32;}
117 &#32;&#32;&#32;&#32;tx.<link linkend="class_t_x_aa9739c5c2077454c779098db7baefc2b_1aa9739c5c2077454c779098db7baefc2b">ostm_exit</link>();
118 }
<link linkend="class_t_m_a1d6891b1d3e71cc0acef54e7afe71c09_1a1d6891b1d3e71cc0acef54e7afe71c09">122 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_t_m_a1d6891b1d3e71cc0acef54e7afe71c09_1a1d6891b1d3e71cc0acef54e7afe71c09">TM::print_all</link>(){
123 &#32;&#32;&#32;&#32;<link linkend="class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_1a123bc5aa0766a7b909bebc54a429e5b0">get_Lock</link>.lock();
124 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keyword">auto</emphasis>&#32;current&#32;=&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.begin();&#32;current&#32;!=&#32;<link linkend="class_t_m_a0333dfa193ea99d7626de74a2b932e9b_1a0333dfa193ea99d7626de74a2b932e9b">txMap</link>.end();&#32;++current)&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;KEY&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;current-&gt;first&#32;&lt;&lt;&#32;std::endl;
126 &#32;&#32;&#32;&#32;}
127 &#32;&#32;&#32;&#32;<link linkend="class_t_m_a123bc5aa0766a7b909bebc54a429e5b0_1a123bc5aa0766a7b909bebc54a429e5b0">get_Lock</link>.unlock();
128 }
129 
<link linkend="class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_1afb8bc9f42fe06c52747beb7f4c46915c">134 </link>std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;&#32;<link linkend="class_t_m_afb8bc9f42fe06c52747beb7f4c46915c_1afb8bc9f42fe06c52747beb7f4c46915c">TM::get_thread_Map</link>()&#32;{
135 &#32;&#32;&#32;&#32;std::map&lt;&#32;std::thread::id,&#32;int&#32;&gt;&#32;thread_Map;
136 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;thread_Map;
137 }
    </computeroutput></literallayout>
</section>
